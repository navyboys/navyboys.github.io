<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | @navyboys]]></title>
  <link href="http://NavySPACE.net/categories/development/atom.xml" rel="self"/>
  <link href="http://NavySPACE.net/"/>
  <updated>2016-10-05T21:18:20-07:00</updated>
  <id>http://NavySPACE.net/</id>
  <author>
    <name><![CDATA[NavySPACE.net]]></name>
    <email><![CDATA[navyboys@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Regex Basics]]></title>
    <link href="http://NavySPACE.net/regex-basics+/"/>
    <updated>2016-03-10T15:48:00-08:00</updated>
    <id>http://NavySPACE.net/regex-basics </id>
    <content type="html"><![CDATA[<p>Here is the notes taken for <a href="http://regexone.com/">RegexOne</a>’s interactive tutorial which explores the more practical uses of regular expressions so that we can use them as quickly as possible.</p>

<h2 id="cheat-sheet">Cheat Sheet</h2>

<p>Here is the summary of basic regex usages.</p>

<table>
  <thead>
    <tr>
      <th>Regex</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>abc…</code></td>
      <td>Letters</td>
    </tr>
    <tr>
      <td><code>123…</code></td>
      <td>Digits</td>
    </tr>
    <tr>
      <td><code>\d</code></td>
      <td>Any Digit</td>
    </tr>
    <tr>
      <td><code>\D</code></td>
      <td>Any Non-digit character</td>
    </tr>
    <tr>
      <td><code>.</code></td>
      <td>Any Character</td>
    </tr>
    <tr>
      <td><code>\.</code></td>
      <td>Period</td>
    </tr>
    <tr>
      <td><code>[abc]</code></td>
      <td>Only a, b, or c</td>
    </tr>
    <tr>
      <td><code>[^abc]</code></td>
      <td>Not a, b, nor c</td>
    </tr>
    <tr>
      <td><code>[a-z]</code></td>
      <td>Characters a to z</td>
    </tr>
    <tr>
      <td><code>[0-9]</code></td>
      <td>Numbers 0 to 9</td>
    </tr>
    <tr>
      <td><code>\w</code></td>
      <td>Any Alphanumeric character</td>
    </tr>
    <tr>
      <td><code>\W</code></td>
      <td>Any Non-alphanumeric character</td>
    </tr>
    <tr>
      <td><code>{m}</code></td>
      <td>m Repetitions</td>
    </tr>
    <tr>
      <td><code>{m,n}</code></td>
      <td>m to n Repetitions</td>
    </tr>
    <tr>
      <td><code>*</code></td>
      <td>Zero or more repetitions</td>
    </tr>
    <tr>
      <td><code>+</code></td>
      <td>One or more repetitions</td>
    </tr>
    <tr>
      <td><code>?</code></td>
      <td>Optional character</td>
    </tr>
    <tr>
      <td><code>\s</code></td>
      <td>Any Whitespace</td>
    </tr>
    <tr>
      <td><code>\S</code></td>
      <td>Any Non-whitespace character</td>
    </tr>
    <tr>
      <td><code>^…$</code></td>
      <td>Starts and ends</td>
    </tr>
    <tr>
      <td><code>(…)</code></td>
      <td>Capture Group</td>
    </tr>
    <tr>
      <td><code>(a(bc))</code></td>
      <td>Capture Sub-group</td>
    </tr>
    <tr>
      <td><code>(.*)</code></td>
      <td>Capture all</td>
    </tr>
    <tr>
      <td><code>(abc|def)</code></td>
      <td>Matches abc or def</td>
    </tr>
  </tbody>
</table>

<h2 id="lesson-1-an-introduction-and-the-abcs">Lesson 1: An Introduction, and the ABCs</h2>

<p><strong>Everything is essentially a character</strong>. We are writing patterns to match a specific sequence of characters (also known as a string).</p>

<p><strong>Pattern</strong>: <code>abc</code></p>

<p><code>ruby
Task 	Text 	 
match 	'abcdefg'
match 	'abcde'
match 	'abc'
</code></p>

<h2 id="lesson-1-the-123s">Lesson 1½: The 123s</h2>

<p><strong>Pattern</strong>: <code>123</code></p>

<p><code>ruby
Task 	Text 	 
match 	'abc123xyz'
match 	'define "123"'
match 	'var g = 123;'
</code></p>

<h2 id="lesson-2-the-dot">Lesson 2: The Dot</h2>

<p><strong>Pattern</strong>: <code>...\.</code></p>

<p><code>ruby
Task 	Text 	 
match 	'cat.'
match 	'896.'
match 	'?=+.'
skip 	'abc1'
</code></p>

<h2 id="lesson-3-matching-specific-characters">Lesson 3: Matching specific characters</h2>

<p><strong>Pattern</strong>: <code>[cmf]an</code></p>

<p><code>ruby
Task	Text	 
match	'can'
match	'man'
match	'fan'
skip	'dan'
skip	'ran'
skip	'pan'
</code></p>

<h2 id="lesson-4-excluding-specific-characters">Lesson 4: Excluding specific characters</h2>

<p><strong>Pattern</strong>: <code>[^b]og</code></p>

<p><code>ruby
Task	Text	 
match	'hog'
match	'dog'
skip	'bog'
</code></p>

<h2 id="lesson-5-character-ranges">Lesson 5: Character ranges</h2>

<p><strong>Pattern</strong>: <code>[A-C][n-p][a-c]</code></p>

<p><code>ruby
Task	Text	 
match	'Ana'
match	'Bob'
match	'Cpc'
skip	'aax'
skip	'bby'
skip	'ccz'
</code></p>

<h2 id="lesson-6-catching-some-zzzs">Lesson 6: Catching some zzz’s</h2>

<p><strong>Pattern</strong>: <code>waz{2,4}up</code></p>

<p><code>ruby
Task	Text	 
match	'wazzzzup'
match	'wazzzup'
skip	'wazup'
</code></p>

<h2 id="lesson-7-mr-kleene-mr-kleene">Lesson 7: Mr. Kleene, Mr. Kleene</h2>

<p><strong>Pattern</strong>: <code>aa+b*c+</code> or <code>a{2,4}b{0,4}c{1,2}</code></p>

<p><code>ruby
Task	Text	 
match	'aaaabcc'
match	'aabbbbc'
match	'aacc'
skip	'a'
</code></p>

<h2 id="lesson-8-characters-optional">Lesson 8: Characters optional</h2>

<p>Pattern: <code>\d+ files? found\?</code></p>

<p><code>ruby
Task	Text	 
match	'1 file found?'
match	'2 files found?'
match	'24 files found?'
skip	'No files found.'
</code></p>

<h2 id="lesson-9-all-this-whitespace">Lesson 9: All this whitespace</h2>

<p><strong>Pattern</strong>: <code>\d\.\s+abc</code></p>

<p><code>ruby
Task	Text	 
match	'1.  abc'
match	'2.	  abc'
match	'3.      abc'
skip	'4.abc'
</code></p>

<h2 id="lesson-10-starting-and-ending">Lesson 10: Starting and ending</h2>

<p><strong>Pattern</strong>: <code>^Mission: successful$</code></p>

<p><code>ruby
Task	Text	 
match	'Mission: successful'
skip	'Last Mission: unsuccessful'
skip	'Next Mission: successful upon capture of target'
</code></p>

<h2 id="lesson-11-capturing-groups">Lesson 11: Capturing groups</h2>

<p>Regular expressions allow us to not just <strong>match text</strong> but also to <strong>extract information</strong> for further processing. This is done by defining <strong>groups of characters</strong> and capturing them using the special parentheses <code>(</code> and <code>)</code> metacharacters.</p>

<ul>
  <li><code>^(IMG\d+\.png)$</code>: capture and extract the full filename</li>
  <li><code>^(IMG\d+)\.png$</code>: capture the part before the period</li>
</ul>

<p><strong>Pattern</strong>: <code>^(file.+)\.pdf$</code></p>

<p><code>ruby
Task     Text                          Capture Groups	 
capture  'file_record_transcript.pdf'  'file_record_transcript'
capture  'file_07241999.pdf'           'file_07241999'
skip     'testfile_fake.pdf.tmp'
</code></p>

<h2 id="lesson-12-nested-groups">Lesson 12: Nested groups</h2>

<p><strong>Pattern</strong>: <code>(\w+ (\d+))</code></p>

<p><code>ruby
Task     Text        Capture Groups
capture  'Jan 1987'  'Jan 1987' '1987'
capture  'May 1969'  'May 1969' '1969'
capture  'Aug 2011'  'Aug 2011' '2011'
</code></p>

<h2 id="lesson-13-more-group-work">Lesson 13: More group work</h2>

<p><strong>Pattern</strong>: <code>((\d+)x(\d+))</code></p>

<p><code>ruby
Task     Text         Capture Groups
Capture  '1280x720'   '1280' '720'
Capture  '1920x1600'  '1920' '1600'
Capture  '1024x768'   '1024' '768'
</code></p>

<h2 id="lesson-14-its-all-conditional">Lesson 14: It’s all conditional</h2>

<p>Writing patterns with many conditions can be hard to read, so you should consider making them separate patterns if they get too complex.</p>

<p><strong>Pattern</strong>: <code>I love (cats|dogs)</code></p>

<p><code>ruby
Task   Text	 
match	 'I love cats'
match	 'I love dogs'
skip	 'I love logs'
skip	 'I love cogs'
</code></p>

<h2 id="lesson-15-other-special-characterss">Lesson 15: Other special characterss</h2>

<p><strong>Boundary</strong></p>

<ul>
  <li><code>\b</code>: boundary between a word and a non-word character</li>
  <li><code>\w+\b</code>: capturing entire words</li>
</ul>

<p><strong>Back Referencing</strong></p>

<ul>
  <li><code>\0</code>: the full matched text</li>
  <li><code>\1</code>: group 1</li>
  <li><code>\2</code>: group 2</li>
</ul>

<p>This is useful for example when you are in a text editor and doing a search and replace using regular expressions to swap two numbers, you can search for <code>(\d+)-(\d+)</code> and replace it with <code>\2-\1</code> to put the second captured number first, and the first captured number second for example.</p>

<p>Pattern: <code>.*</code></p>

<p><code>ruby
Task   Text	 
match  'The quick brown fox jumped over the lazy dog.'
match  'There were 614 instances of students getting 90.0% or above.'
match  'The FCC had to censor the network for saying &amp;$#*@!.'
</code></p>

<h2 id="problem-1-matching-a-decimal-numbers">Problem 1: matching a decimal numbers</h2>

<p><strong>Pattern</strong>: <code>^-?\d+(,\d+)*(\.\d+(e\d+)?)?$</code></p>

<p>Starts with an optional negative sign, one or more digits, optionally followed by a comma and more digits, followed by an optional fractional component which consists of a period, one or more digits, and another optional component, the exponent followed by more digits.</p>

<p><code>ruby
Task   Text 	 
match  '3.14529'
match  '-255.34'
match  '128'
match  '1.9e10'
match  '123,340.00'
skip   '720p'
</code></p>

<h2 id="problem-2-matching-phone-numbers">Problem 2: matching phone numbers</h2>

<p><strong>Pattern</strong>: <code>1?[\s-]?\(?(\d{3})\)?[\s-]?\d{3}[\s-]?\d{4}</code></p>

<p>This breaks down into the country code <code>1?</code>, the captured area code <code>\(?(\d{3})\)?</code>, and the rest of the digits <code>\d{3}</code> and <code>\d{4}</code> respectively. We use <code>[\s-]?</code> to catch the space or dashes between each component.</p>

<p><code>ruby
Task     Text              Capture Groups
capture  '415-555-1234'    '415'
capture  '650-555-2345'    '650'
capture  '(416)555-3456'   '416'
capture  '202 555 4567'    '202'
capture  '4035555678'      '403'
capture  '1 416 555 9292'  '416'
</code></p>

<h2 id="problem-3-matching-emails">Problem 3: matching emails</h2>

<p><strong>Pattern</strong>: <code>^([\w\.]*)(\+\w*)?@\w+\.?\w+.\w+</code></p>

<p>To extract the beginning of each email, we can use a simple expression <code>^([\w\.]*)</code> which will match emails starting with alphanumeric characters including the period. It will match up to the point in the text where it reaches an <code>@</code> or <code>+</code>.</p>

<p><code>ruby
Task     Text                                Capture Groups
capture  'tom@hogwarts.com'                  'tom'
capture  'tom.riddle@hogwarts.com'           'tom.riddle'
capture  'tom.riddle+regexone@hogwarts.com'  'tom.riddle'
capture  'tom@hogwarts.eu.com'               'tom'
capture  'potter@hogwarts.com'               'potter'
capture  'harry@hogwarts.com'                'harry'
capture  'hermione+regexone@hogwarts.com'    'hermione'
</code></p>

<h2 id="problem-4-matching-html">Problem 4: matching HTML</h2>

<p><strong>Pattern</strong>: <code>&lt;(\w+)</code></p>

<ul>
  <li>tag name: <code>&lt;(\w+)</code></li>
  <li>tag content: <code>&gt;([\w\s]*)&lt;</code></li>
  <li>attribute values: <code>='([\w://.]*)</code></li>
</ul>

<p><code>ruby
Task     Text                                      Capture Groups
capture  "&lt;a&gt;This is a link&lt;/a&gt;"                   "a"
capture  "&lt;a href='http://regexone.com'&gt;Link&lt;/a&gt;"  "a"
capture  "&lt;div class='test_style'&gt;Test&lt;/div&gt;"      "div"
capture  "&lt;div&gt;Hello &lt;span&gt;world&lt;/span&gt;&lt;/div&gt;"     "div"
</code></p>

<h2 id="problem-5-matching-specific-filenames">Problem 5: matching specific filenames</h2>

<p>Extract the filenames and extension types of <strong>only image files</strong> (not including temporary files for images currently being edited). Image files are defined as <code>.jpg</code>, <code>.png</code>, and <code>.gif</code>.</p>

<p><strong>Pattern</strong>: <code>(\w+)\.(jpg|png|gif)$</code></p>

<p><code>ruby
Task     Text                   Capture Groups 	 
skip     '.bash_profile'
skip     'workspace.doc'
capture  'img0912.jpg'          'img0912' 'jpg'
capture  'updated_img0912.png'  'updated_img0912' 'png'
skip     'documentation.html'
capture  'favicon.gif'          'favicon' 'gif'
skip     'img0912.jpg.tmp'
skip     'access.lock'
</code></p>

<h2 id="problem-6-trimming-whitespace-from-start-and-end-of-line">Problem 6: Trimming whitespace from start and end of line</h2>

<p>Write a simple regular expression to capture the content of each line, without the extra whitespace.</p>

<p><strong>Pattern</strong>: <code>^\s*(.*)\s*$</code></p>

<p>We can just skip all the starting and ending whitespace by not capturing it in a line.</p>

<p><code>ruby
Task     Text                            Capture Groups
capture  '  The quick brown fox... '     'The quick brown fox...'
capture  ' jumped over the lazy dog.  '  'jumped over the lazy dog.'
</code></p>

<h2 id="problem-7-extracting-information-from-a-log-file">Problem 7: Extracting information from a log file</h2>

<p>Extract the <strong>filename</strong>, <strong>method name</strong> and <strong>line number</strong> of line of the stack trace.</p>

<p>Pattern: <code>(\w+)\(([\w\.]+):(\d+)\)</code></p>

<p>The first capture group is the method, followed by an escaped parenthesis, followed by the filename, a colon, and finally the line number.</p>

<p><code>ruby
Task    Text                                                        Capture Groups
skip    'W/dalvikvm( 1553): threadid=1: uncaught exception'
skip    'E/( 1553): FATAL EXCEPTION: main'
skip    'E/( 1553): java.lang.StringIndexOutOfBoundsException'
capture 'E/( 1553):   at widget.List.makeView(ListView.java:1727)'  'makeView' 'ListView.java' '1727'
capture 'E/( 1553):   at widget.List.fillDown(ListView.java:652)'   'fillDown' 'ListView.java' '652'
capture 'E/( 1553):   at widget.List.fillFrom(ListView.java:709)'   'fillFrom' 'ListView.java' '709'
</code></p>

<h2 id="problem-8-parsing-and-extracting-data-from-a-url">Problem 8: Parsing and extracting data from a URL</h2>

<p><strong>URIs</strong>, or <em>Uniform Resource Identifiers</em>, are a representation of a resource that is generally composed of a <strong>scheme</strong>, <strong>host</strong>, <strong>port</strong> (optional), and <strong>resource path</strong>, respectively highlighted below.</p>

<p><code>http://regexone.com:80/page</code></p>

<p>The scheme describes the protocol to communicate with, the host and port describe the source of the resource, and the full path describes the location at the source for the resource.</p>

<p>In the exercise below, try to extract the <strong>protocol</strong>, <strong>host</strong> and <strong>port</strong> of the all the resources listed.</p>

<p><strong>Pattern</strong>: <code>^(\w+)://([\w\-\.]+):?(\d+)?</code></p>

<ul>
  <li>protocols: <code>(\w+)://</code></li>
  <li>hosts: <code>://([\w\-\.]+)</code></li>
  <li>ports: <code>(:(\d+))</code></li>
</ul>

<p><code>ruby
Task    Text                                                          Capture Groups
capture 'ftp://file_server.com:21/top_secret/life_changing_plans.pdf' 'ftp' 'file_server.com' '21'
capture 'http://regexone.com/lesson/introduction#section'             'http' 'regexone.com'
capture 'file://localhost:4040/zip_file'                              'file' 'localhost' '4040'
capture 'https://s3cur3-server.com:9999/'                             'https' 's3cur3-server.com' '9999'
capture 'market://search/angry%20birds'                               'market' 'search'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Atom for Web Development]]></title>
    <link href="http://NavySPACE.net/using-atom-for-web-development/"/>
    <updated>2015-12-10T12:00:00-08:00</updated>
    <id>http://NavySPACE.net/using-atom-for-web-development</id>
    <content type="html"><![CDATA[<p>As a programmer, I have tried a variety of different editors. Back to the days when I got my first job as a developer in NEC, I used <strong>Hitemaru</strong>, which once was a popular editor among Japanese programmers, to  write PL/SQL programs. That was the first time I met with text editors other than advanced but ‘heavy’ IDEs. In the following days, I tried <strong>Notepad++</strong>, <strong>Vim</strong> and settled down with <strong>Sublime Text</strong> when I began coding in Ruby a few years ago. But recently, I shifted to <strong>Atom</strong> without missing one single feature of the previous so far. I really love Atom for its zero-compromise combination of hackability and usability. Also, it’s free and is in continuous development by the core team from Github.</p>

<p>Since Atom comes with a great set of defaults, <em>Following the Default is King</em> philosophy works very well with Atom. For example, support for multiple languages, linters, integration with the terminal, tree-view, and Git, etc. Furthermore, Atom provides an extensive level of customization via themes and packages. Just like Sublime Text, for a long time, text editors have been able to be tuned and tweaked, but Atom has taken it to a new level.</p>

<h2 id="packages">Packages</h2>

<p>For the purposes of web development, you will definitely need other packages. Here are some packages I have installed for Ruby on Rails development. (Some screenshots below are taken from the respective package pages and articles in the reference list.)</p>

<h4 id="linter">Linter</h4>

<p>Linter is a base linter provider that allows consumers to visualize errors and other kind of messages easily.</p>

<p><img src="https://i.github-camo.com/70b6e697c9d793642414b4ea6d08dbb9678877b3/687474703a2f2f672e7265636f726469742e636f2f313352666d6972507a322e676966" alt="Linter" /></p>

<p>Here are some specific linters I used for Ruby on Rails development.</p>

<ul>
  <li>linter-ruby</li>
  <li>linter-scss-lint</li>
  <li>linter-haml</li>
  <li>linter-rubocop</li>
  <li>linter-rails-best-practices</li>
</ul>

<h4 id="atom-beautify">atom-beautify</h4>

<p>This package makes messy code neater and more readable.</p>

<p><img src="http://media02.hongkiat.com/useful-atom-packages/beautify.gif" alt="Beautify" /></p>

<h4 id="emmet">Emmet</h4>

<p>Emmet is an essential tool for web developers which expand abbreviations by <code>Tab</code> key to allow you to work quickly when writing HTML, CSS, Sass / SCSS and LESS syntaxes.</p>

<p><img src="http://media02.hongkiat.com/useful-atom-packages/emmet.gif" alt="Emmet" /></p>

<h4 id="merge-conflicts">Merge Conflicts</h4>

<p>This package detects the conflict markers left by <code>git merge</code> and overlays a set of controls for resolving each and navigating among them. It makes handling conflicts much easier.</p>

<p><img src="https://i.github-camo.com/44ff44f156f274b8799022e44bcacb804fadc08a/68747470733a2f2f7261772e6769746875622e636f6d2f736d61736877696c736f6e2f6d657267652d636f6e666c696374732f6d61737465722f646f63732f636f6e666c6963742d7265736f6c7574696f6e2e676966" alt="Merge Conflicts" /></p>

<h4 id="ruby-test">ruby-test</h4>

<p>Using this package, you can run Ruby tests, Rspec examples and Cucumber features from Atom quickly and easily.</p>

<p><img src="https://i.github-camo.com/64f6412302e14f7a155a13eeb6ff315a07fe0360/687474703a2f2f636c2e6c792f696d6167652f3330306e32673130317a30792f727562792d74657374362e676966" alt="ruby-test" /></p>

<h4 id="color-picker">Color Picker</h4>

<p>A neat color-related package which lets you pick colorsas easy as navigating a color picker. It can be done by pressing <code>CMD</code>+<code>SHIFT</code>+<code>C</code>.</p>

<p><img src="https://i.github-camo.com/467c72e686f00893c3d36bf46499e76c10f31787/68747470733a2f2f6769746875622e636f6d2f74686f6d61736c696e647374726f6d2f636f6c6f722d7069636b65722f7261772f6d61737465722f707265766965772e676966" alt="Color Picker" /></p>

<h4 id="file-icons">File Icons</h4>

<p>File Icons assigns file extension icons and colours for improved visual grepping.</p>

<p><img src="http://media02.hongkiat.com/useful-atom-packages/fileicons.jpg" alt="File Icons" /></p>

<h2 id="shortcuts">Shortcuts</h2>

<p>Keyboard shortcuts are the essential way to do things faster for a develeper working with Atom. Here are some shortcuts I use often during my development.</p>

<h4 id="key-to-the-keys">Key to the Keys</h4>

<ul>
  <li><code>⌘</code> : Command key</li>
  <li><code>⌃</code> : Control key</li>
  <li><code>⌫</code> : Delete key</li>
  <li><code>←</code> : Left arrow key</li>
  <li><code>→</code> : Right arrow key</li>
  <li><code>↑</code> : Up arrow key</li>
  <li><code>↓</code> : Down arrow key</li>
  <li><code>⌥</code> : Option or Alt key</li>
  <li><code>↩</code> : Return or Enter key</li>
  <li><code>⇧</code> : Shift key</li>
</ul>

<h4 id="general">General</h4>

<table>
  <thead>
    <tr>
      <th>Task</th>
      <th>Keystrokes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Fuzzy Find Files</td>
      <td><code>⌘</code>-<code>t</code></td>
    </tr>
    <tr>
      <td>Open Command Palette</td>
      <td><code>⌘</code>-<code>⇧</code>-<code>p</code></td>
    </tr>
    <tr>
      <td>Open Configuration Editor</td>
      <td><code>⌘</code>-<code>,</code></td>
    </tr>
    <tr>
      <td>Toggle Full Screen</td>
      <td><code>⌃</code>-<code>⌘</code>-<code>f</code></td>
    </tr>
    <tr>
      <td>Toggle Tree View</td>
      <td><code>⌘</code>-<code>\</code></td>
    </tr>
    <tr>
      <td>Toggle Line Comments</td>
      <td><code>⌘</code>-<code>/</code></td>
    </tr>
    <tr>
      <td>Select Grammar</td>
      <td><code>⌃</code>-<code>⇧</code>-<code>L</code></td>
    </tr>
    <tr>
      <td>Increase Font Size</td>
      <td><code>⌘</code>-<code>+</code></td>
    </tr>
    <tr>
      <td>Decrease Font Size</td>
      <td><code>⌘</code>-<code>-</code></td>
    </tr>
    <tr>
      <td>Convert to Upper Case</td>
      <td><code>⌘</code>-<code>k</code>-<code>u</code></td>
    </tr>
    <tr>
      <td>Convert to Lower Case</td>
      <td><code>⌘</code>-<code>k</code>-<code>L</code></td>
    </tr>
    <tr>
      <td>Switch Tabs</td>
      <td><code>⌃</code>-<code>tab</code></td>
    </tr>
  </tbody>
</table>

<p>Switching tabs with <code>⌃</code>-<code>tab</code> is not a feature provided by Atom. You can get this Sublime Text-like behavior by adding the following to keymap:</p>

<p><code>
'body':
  'ctrl-tab': 'pane:show-next-item'
</code></p>

<h4 id="code-navigation--management">Code Navigation &amp; Management</h4>

<table>
  <thead>
    <tr>
      <th>Task</th>
      <th>Keystrokes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Select Entire Word</td>
      <td><code>⌃</code>-<code>⇧</code>-<code>w</code></td>
    </tr>
    <tr>
      <td>Go to Line</td>
      <td><code>⌃</code>-<code>g</code></td>
    </tr>
    <tr>
      <td>Delete Line</td>
      <td><code>⌃</code>-<code>⇧</code>-<code>k</code></td>
    </tr>
    <tr>
      <td>Duplicate Line</td>
      <td><code>⌘</code>-<code>⇧</code>-<code>d</code></td>
    </tr>
    <tr>
      <td>Indent Selected Text</td>
      <td><code>⌘</code>-<code>]</code></td>
    </tr>
    <tr>
      <td>Outdent Selected Text</td>
      <td><code>⌘</code>-<code>[</code></td>
    </tr>
    <tr>
      <td>Move to Top of File</td>
      <td><code>⌘</code>-<code>↑</code></td>
    </tr>
    <tr>
      <td>Move to Bottom of File</td>
      <td><code>⌘</code>-<code>↓</code></td>
    </tr>
    <tr>
      <td>Move to First Character of Line</td>
      <td><code>⌘</code>-<code>←</code></td>
    </tr>
    <tr>
      <td>Move to Last Character of Line</td>
      <td><code>⌘</code>-<code>→</code></td>
    </tr>
  </tbody>
</table>

<h4 id="editor-view-tasks">Editor View Tasks</h4>

<table>
  <thead>
    <tr>
      <th>Task</th>
      <th>Keystrokes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Split Panes Vertically</td>
      <td><code>⌘</code>-<code>k</code>-<code>↓</code></td>
    </tr>
    <tr>
      <td>Split Panes Horizontally</td>
      <td><code>⌘</code>-<code>k</code>-<code>→</code></td>
    </tr>
    <tr>
      <td>Vertical Navigation Panes</td>
      <td><code>⌘</code>-<code>k</code> <code>⌘</code>-<code>↓</code></td>
    </tr>
    <tr>
      <td>Horizontal Navigation Panes</td>
      <td><code>⌘</code>-<code>k</code> <code>⌘</code>-<code>→</code></td>
    </tr>
  </tbody>
</table>

<h4 id="file-tasks">File Tasks</h4>

<table>
  <thead>
    <tr>
      <th>Task</th>
      <th>Keystrokes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Open Tree View</td>
      <td><code>⌃</code>-<code>0</code></td>
    </tr>
    <tr>
      <td>Add a File</td>
      <td><code>a</code></td>
    </tr>
    <tr>
      <td>Move a File</td>
      <td><code>m</code></td>
    </tr>
    <tr>
      <td>Delete a File</td>
      <td><code>⌫</code></td>
    </tr>
  </tbody>
</table>

<h4 id="find--replace">Find &amp; Replace</h4>

<table>
  <thead>
    <tr>
      <th>Task</th>
      <th>Keystrokes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Find String in Current File</td>
      <td><code>⌘</code>-<code>f</code></td>
    </tr>
    <tr>
      <td>Find String in All Project Files</td>
      <td><code>⇧</code>-<code>⌘</code>-<code>f</code></td>
    </tr>
    <tr>
      <td>Find Next Matching String</td>
      <td><code>⌘</code>-<code>g</code></td>
    </tr>
    <tr>
      <td>Find Previous Matching String</td>
      <td><code>⇧</code>-<code>⌘</code>-<code>g</code></td>
    </tr>
    <tr>
      <td>Select Next Matching String</td>
      <td><code>⌘</code>-<code>d</code></td>
    </tr>
    <tr>
      <td>Select All Matching Strings</td>
      <td><code>⌃</code>-<code>⌘</code>-<code>g</code></td>
    </tr>
    <tr>
      <td>Replace String in Current File</td>
      <td><code>⌥</code>-<code>⌘</code>-<code>f</code></td>
    </tr>
  </tbody>
</table>

<h3 id="references">References</h3>

<ul>
  <li><a href="http://www.jonobacon.org/2015/11/16/atom-my-new-favorite-code-editor/">Atom: My New Favorite Code Editor</a></li>
  <li><a href="http://www.hongkiat.com/blog/useful-atom-packages/">10 Most Useful Atom Packages for Web Developers</a></li>
  <li><a href="http://www.developingandrails.com/2015/04/setting-up-atom-for-rails-development.html">Setting up Atom for Rails Development</a></li>
  <li><a href="http://sweetme.at/2014/03/10/atom-editor-cheat-sheet/">Atom Editor Keyboard Shortcut Cheat Sheet</a></li>
  <li><a href="http://d2wy8f7a9ursnm.cloudfront.net/atom-editor-cheat-sheet.pdf">Atom Editor Cheat Sheet</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
