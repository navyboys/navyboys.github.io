<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: note | @navyboys]]></title>
  <link href="http://NavySPACE.net/categories/note/atom.xml" rel="self"/>
  <link href="http://NavySPACE.net/"/>
  <updated>2016-10-11T12:08:36-07:00</updated>
  <id>http://NavySPACE.net/</id>
  <author>
    <name><![CDATA[NavySPACE.net]]></name>
    <email><![CDATA[navyboys@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Regex with Javascript]]></title>
    <link href="http://NavySPACE.net/regex-js/"/>
    <updated>2016-10-10T20:59:00-07:00</updated>
    <id>http://NavySPACE.net/regex-js</id>
    <content type="html"><![CDATA[<p>Regular expressions are a sharp tool with an awkward handle. They simplify some tasks tremendously but can quickly become unmanageable when applied to complex problems. Part of knowing how to use them is resisting the urge to try to shoehorn things that they cannot sanely express into them.</p>

<p>This is the notes taken for <a href="http://eloquentjavascript.net/">Eloquent Javascript</a>’s <a href="http://eloquentjavascript.net/09_regexp.html">Regular Expressions</a> chapter, concentrated on the programming interface JavaScript provides for Regex.</p>

<h2 id="creating-a-regular-expression">Creating a regular expression</h2>

<p>In JavaScript, a regular expression is a type of object. It can either be constructed with the <code>RegExp</code> constructor or written as a literal value by enclosing the pattern in forward slash (<code>/</code>) characters.</p>

<p><code>javascript
var re1 = new RegExp("abc");
var re2 = /abc/;
</code></p>

<h2 id="methods-for-regular-expression-object">Methods for Regular Expression Object</h2>

<p>A regular expression has a method <code>test</code> to test whether a given string matches it. It also has an <code>exec</code> method that, when a match is found, returns an array containing all matched groups. Such an array has an <code>index</code> property that indicates where the match started.</p>

<h4 id="test"><code>test</code></h4>

<p><code>javascript
console.log(/abc/.test("abcde")); // → true
console.log(/abc/.test("abxde")); // → false
</code></p>

<h4 id="exec"><code>exec</code></h4>

<p><code>javascript
var match = /\d+/.exec("one two 100");
console.log(match);        // → ["100"]
console.log(match.index);  // → 8
</code></p>

<p>When the regular expression contains subexpressions grouped with parentheses, the text that matched those groups will also show up in the array. The whole match is always the first element. The next element is the part matched by the first group (the one whose opening parenthesis comes first in the expression), then the second group, and so on.</p>

<p><code>javascript
console.log(/bad(ly)?/.exec("bad")); // → ["bad", undefined]
console.log(/(\d)+/.exec("123"));    // → ["123", "3"]
</code></p>

<h2 id="methods-for-string">Methods for String</h2>

<p>Strings have a <code>match</code> method to match them against a regular expression and a <code>search</code> method to search for one, returning only the starting position of the match. Their <code>replace</code> method can replace matches of a pattern with a replacement string. Alternatively, you can pass a function to replace, which will be used to build up a replacement string based on the match text and matched groups.</p>

<p>Regular expressions can have <strong>options</strong>, which are written after the closing slash. The <code>i</code> option makes the match <em>case insensitive</em>, while the <code>g</code> option makes the expression <em>global</em>, which, among other things, causes the replace method to replace all instances instead of just the first.</p>

<h4 id="match"><code>match</code></h4>

<p><code>javascript
console.log("one two 100".match(/\d+/)); // → ["100"]
console.log("bad".match(/bad(ly)?/));    // → ["bad", undefined]
</code></p>

<h4 id="search"><code>search</code></h4>

<p><code>javascript
console.log("  word".search(/\S/)); // → 2
console.log("      ".search(/\S/)); // → -1
</code></p>

<h4 id="replace"><code>replace</code></h4>

<p><code>javascript
console.log("Borobudur".replace(/[ou]/, "a"));  // → Barobudur
console.log("Borobudur".replace(/[ou]/g, "a")); // → Barabadar
</code></p>

<p>The real power of using regular expressions with replace comes from the fact that we can <strong>refer back to matched groups</strong> in the replacement string.</p>

<p>``` javascript
console.log(
  “Hopper, Grace\nMcCarthy, John\nRitchie, Dennis”
    .replace(/([\w ]+), ([\w ]+)/g, “$2 $1”));</p>

<p>// → Grace Hopper
//   John McCarthy
//   Dennis Ritchie
```</p>

<p><code>$1</code> is replaced by the text that matched against the first group, <code>$2</code> by the second, and so on, up to <code>$9</code>. The whole match can be referred to with <code>$&amp;</code>.</p>

<p>It is also possible to <strong>pass a function</strong>, rather than a string, as the second argument to replace.</p>

<p>``` javascript
var s = “the cia and fbi”;
console.log(s.replace(/\b(fbi|cia)\b/g, function(str) {
  return str.toUpperCase();
}));</p>

<p>// → the CIA and FBI
```</p>

<h2 id="dynamically-creating-regexp-objects">Dynamically creating RegExp objects</h2>

<p>You can use the <code>RegExp</code> constructor to create regular expression dynamically.</p>

<p>``` javascript
var name = “harry”;
var text = “Harry is a suspicious character.”;
var regexp = new RegExp(“\b(“ + name + “)\b”, “gi”);
console.log(text.replace(regexp, “<em>$1</em>”));</p>

<p>// → <em>harry</em> is a suspicious character.
```</p>

<p>We can add backslashes before any character that we don’t trust. Adding backslashes before alphabetic characters is a bad idea because things like <code>\b</code> and <code>\n</code> have a special meaning. But escaping everything that’s not alphanumeric or whitespace is safe.</p>

<p>``` javascript
var name = “dea+hl[]rd”;
var text = “This dea+hl[]rd guy is super annoying.”;
var escaped = name.replace(/[^\w\s]/g, “\$&amp;”);
var regexp = new RegExp(“\b(“ + escaped + “)\b”, “gi”);
console.log(text.replace(regexp, “<em>$1</em>”));</p>

<p>// → This <em>dea+hl[]rd</em> guy is super annoying.
```</p>

<h2 id="the-lastindex-property">The lastIndex property</h2>

<p>The <code>exec</code> method similarly does not provide a convenient way to start searching from a given position in the string. But it does provide an inconvenient way.</p>

<p>Regular expression objects have properties. One such property is <code>source</code>, which contains the string that expression was created from. Another property is <code>lastIndex</code>, which controls, in some limited circumstances, where the next match will start.</p>

<p>Those circumstances are that the regular expression must have the <strong>global</strong> (g) option enabled, and the match must happen through the <strong>exec</strong> method.</p>

<p><code>javascript
var pattern = /y/g;
pattern.lastIndex = 3;
var match = pattern.exec("xyzzy");
console.log(match.index);        // → 4
console.log(pattern.lastIndex);  // → 5
</code></p>

<p>If the match was successful, the call to exec automatically updates the lastIndex property to point after the match. If no match was found, lastIndex is set back to zero, which is also the value it has in a newly constructed regular expression object.</p>

<p>When using a global regular expression value for multiple exec calls, these automatic updates to the lastIndex property can cause problems. Your regular expression might be accidentally starting at an index that was left over from a previous call.</p>

<p><code>javascript
var digit = /\d/g;
console.log(digit.exec("here it is: 1")); // → ["1"]
console.log(digit.exec("and now: 1"));    // → null
</code></p>

<p>Another interesting effect of the <strong>global</strong> option is that it changes the way the <code>match</code> method on strings works. When called with a <strong>global</strong> expression, instead of returning an array similar to that returned by <code>exec</code>, <code>match</code> will find all matches of the pattern in the string and return an array containing the matched strings.</p>

<p><code>javascript
console.log("Banana".match(/an/g)); // → ["an", "an"]
</code></p>

<p>So be cautious with global regular expressions. The cases where they are necessary—calls to <strong>replace</strong> and places where you want to explicitly use <strong>lastIndex</strong>—are typically the only places where you want to use them.</p>

<h2 id="looping-over-matches">Looping over matches</h2>

<p>A common pattern is to scan through all occurrences of a pattern in a string, in a way that gives us access to the match object in the loop body, by using <code>lastIndex</code> and <code>exec</code>.</p>

<p>``` javascript
var input = “A string with 3 numbers in it… 42 and 88.”;
var number = /\b(\d+)\b/g;
var match;
while (match = number.exec(input))
  console.log(“Found”, match[1], “at”, match.index);</p>

<p>// → Found 3 at 14
//   Found 42 at 33
//   Found 88 at 40
```</p>

<h2 id="parsing-an-ini-file">Parsing an INI file</h2>

<p>Imagine we are writing a program to automatically harvest information about our enemies from the Internet.</p>

<ul>
  <li>INI file</li>
</ul>

<p>```
searchengine=http://www.google.com/search?q=$1
spitefulness=9.7</p>

<p>; comments are preceded by a semicolon…
; each section concerns an individual enemy
[larry]
fullname=Larry Doe
type=kindergarten bully
website=http://www.geocities.com/CapeCanaveral/11451</p>

<p>[gargamel]
fullname=Gargamel
type=evil sorcerer
outputdir=/home/marijn/enemies/gargamel
```</p>

<ul>
  <li>Parsing program in Javascript</li>
</ul>

<p>``` javascript
function parseINI(string) {
  // Start with an object to hold the top-level fields
  var currentSection = {name: null, fields: []};
  var categories = [currentSection];</p>

<p>string.split(/\r?\n/).forEach(function(line) {
    var match;
    if (/^\s<em>(;.</em>)?$/.test(line)) {
      return;
    } else if (match = line.match(/^[(.<em>)]$/)) {
      currentSection = {name: match[1], fields: []};
      categories.push(currentSection);
    } else if (match = line.match(/^(\w+)=(.</em>)$/)) {
      currentSection.fields.push({name: match[1],
                                  value: match[2]});
    } else {
      throw new Error(“Line ‘” + line + “’ is invalid.”);
    }
  });</p>

<p>return categories;
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Account Setup]]></title>
    <link href="http://NavySPACE.net/github-setup/"/>
    <updated>2016-10-05T21:02:00-07:00</updated>
    <id>http://NavySPACE.net/github-setup</id>
    <content type="html"><![CDATA[<p>Account needs to be set up with GitHub credentials so that you can push to your repositories on GitHub. Follow the steps below.</p>

<h2 id="configure-github-email">Configure GitHub email</h2>

<p>Make sure that you are using the e-mail address which you used when setting up your Git account.</p>

<p><code>bash
git config --global user.email 'your@email.com'
</code></p>

<h2 id="configure-full-name">Configure full name</h2>

<p>Again, make sure that this is the full name which you originally used to set up your Git account.</p>

<p><code>bash
git config --global user.name 'Your Name'
</code></p>

<h2 id="generate-keys">Generate Keys</h2>

<p>SSH keys are a way to identify trusted computers, without involving passwords. The steps below will walk you through generating an SSH key and then adding the public key to your GitHub account.</p>

<p>Check the directory listing to see if you have files named either <code>id_rsa.pub</code> or <code>id_dsa.pub</code>. If you don’t have either of those files go to <strong>Configuring a New Key</strong>. Otherwise, you can skip to <strong>Add Your Public Key to GitHub</strong> below.</p>

<p><code>bash
cd ~/.ssh
ls -al
</code></p>

<h2 id="configuring-a-new-key">Configuring a New Key</h2>

<p>To generate a new SSH key, copy and paste the text below, making sure to substitute in your email. The default settings are preferred, so when you’re asked to “enter a file in which to save the key” just press enter to continue.</p>

<p><strong>Gotcha</strong>: The first command (that starts with <code>eval</code>) uses <strong>backticks</strong> to quote the text that follows, not single quotes.</p>

<p><code>bash
eval `ssh-agent -s`
ssh-keygen -t rsa -C "your_email@example.com"
</code>
You should see something like the following:</p>

<p><code>bash
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa): [Press enter]
</code></p>

<p>Next, you’ll be asked to enter a passphrase. Leave it blank (just hit enter without typing any other characters), as demonstrated below.</p>

<p><code>bash
Enter passphrase (empty for no passphrase): [Press enter]
Enter same passphrase again: [Press enter]
</code></p>

<p>Which should give you something like this:</p>

<p><code>bash
Your identification has been saved in /Users/you/.ssh/id_rsa.
Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
</code></p>

<p>Then add your new key to the ssh-agent:</p>

<p><code>bash
ssh-add ~/.ssh/id_rsa
</code></p>

<h2 id="add-your-public-key-to-github">Add Your Public Key to GitHub</h2>

<p>From the terminal, type the following:</p>

<p><code>bash
cat ~/.ssh/id_rsa.pub
</code></p>

<p>This will give you a big block of characters which you should highlight and copy from your Terminal/PuTTy window.</p>

<ol>
  <li>In your browser, visit the <a href="https://github.com/settings/admin">Account Settings</a> screen on GitHub.</li>
  <li>Click on <strong>SSH and GPG Keys</strong> on the left sidebar.</li>
  <li>Click <strong>Add SSH Key</strong></li>
  <li>In the Title field, add a descriptive label for the new key.</li>
  <li>Paste your key into the “Key” field.</li>
  <li>Click <strong>Add key</strong>.</li>
  <li>Confirm the action by entering your GitHub password.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex Basics]]></title>
    <link href="http://NavySPACE.net/regex-basics/"/>
    <updated>2016-03-10T15:48:00-08:00</updated>
    <id>http://NavySPACE.net/regex-basics</id>
    <content type="html"><![CDATA[<p>Here is the notes taken for <a href="http://regexone.com/">RegexOne</a>’s interactive tutorial which explores the more practical uses of regular expressions so that we can use them as quickly as possible.</p>

<h2 id="cheat-sheet">Cheat Sheet</h2>

<p>Here is the summary of basic regex usages.</p>

<table>
  <thead>
    <tr>
      <th>Regex</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>abc…</code></td>
      <td>Letters</td>
    </tr>
    <tr>
      <td><code>123…</code></td>
      <td>Digits</td>
    </tr>
    <tr>
      <td><code>\d</code></td>
      <td>Any Digit</td>
    </tr>
    <tr>
      <td><code>\D</code></td>
      <td>Any Non-digit character</td>
    </tr>
    <tr>
      <td><code>.</code></td>
      <td>Any Character</td>
    </tr>
    <tr>
      <td><code>\.</code></td>
      <td>Period</td>
    </tr>
    <tr>
      <td><code>[abc]</code></td>
      <td>Only a, b, or c</td>
    </tr>
    <tr>
      <td><code>[^abc]</code></td>
      <td>Not a, b, nor c</td>
    </tr>
    <tr>
      <td><code>[a-z]</code></td>
      <td>Characters a to z</td>
    </tr>
    <tr>
      <td><code>[0-9]</code></td>
      <td>Numbers 0 to 9</td>
    </tr>
    <tr>
      <td><code>\w</code></td>
      <td>Any Alphanumeric character</td>
    </tr>
    <tr>
      <td><code>\W</code></td>
      <td>Any Non-alphanumeric character</td>
    </tr>
    <tr>
      <td><code>{m}</code></td>
      <td>m Repetitions</td>
    </tr>
    <tr>
      <td><code>{m,n}</code></td>
      <td>m to n Repetitions</td>
    </tr>
    <tr>
      <td><code>*</code></td>
      <td>Zero or more repetitions</td>
    </tr>
    <tr>
      <td><code>+</code></td>
      <td>One or more repetitions</td>
    </tr>
    <tr>
      <td><code>?</code></td>
      <td>Optional character</td>
    </tr>
    <tr>
      <td><code>\s</code></td>
      <td>Any Whitespace</td>
    </tr>
    <tr>
      <td><code>\S</code></td>
      <td>Any Non-whitespace character</td>
    </tr>
    <tr>
      <td><code>^…$</code></td>
      <td>Starts and ends</td>
    </tr>
    <tr>
      <td><code>(…)</code></td>
      <td>Capture Group</td>
    </tr>
    <tr>
      <td><code>(a(bc))</code></td>
      <td>Capture Sub-group</td>
    </tr>
    <tr>
      <td><code>(.*)</code></td>
      <td>Capture all</td>
    </tr>
    <tr>
      <td><code>(abc|def)</code></td>
      <td>Matches abc or def</td>
    </tr>
  </tbody>
</table>

<h2 id="lesson-1-an-introduction-and-the-abcs">Lesson 1: An Introduction, and the ABCs</h2>

<p><strong>Everything is essentially a character</strong>. We are writing patterns to match a specific sequence of characters (also known as a string).</p>

<p><strong>Pattern</strong>: <code>abc</code></p>

<p><code>ruby
Task 	Text 	 
match 	'abcdefg'
match 	'abcde'
match 	'abc'
</code></p>

<h2 id="lesson-1-the-123s">Lesson 1½: The 123s</h2>

<p><strong>Pattern</strong>: <code>123</code></p>

<p><code>ruby
Task 	Text 	 
match 	'abc123xyz'
match 	'define "123"'
match 	'var g = 123;'
</code></p>

<h2 id="lesson-2-the-dot">Lesson 2: The Dot</h2>

<p><strong>Pattern</strong>: <code>...\.</code></p>

<p><code>ruby
Task 	Text 	 
match 	'cat.'
match 	'896.'
match 	'?=+.'
skip 	'abc1'
</code></p>

<h2 id="lesson-3-matching-specific-characters">Lesson 3: Matching specific characters</h2>

<p><strong>Pattern</strong>: <code>[cmf]an</code></p>

<p><code>ruby
Task	Text	 
match	'can'
match	'man'
match	'fan'
skip	'dan'
skip	'ran'
skip	'pan'
</code></p>

<h2 id="lesson-4-excluding-specific-characters">Lesson 4: Excluding specific characters</h2>

<p><strong>Pattern</strong>: <code>[^b]og</code></p>

<p><code>ruby
Task	Text	 
match	'hog'
match	'dog'
skip	'bog'
</code></p>

<h2 id="lesson-5-character-ranges">Lesson 5: Character ranges</h2>

<p><strong>Pattern</strong>: <code>[A-C][n-p][a-c]</code></p>

<p><code>ruby
Task	Text	 
match	'Ana'
match	'Bob'
match	'Cpc'
skip	'aax'
skip	'bby'
skip	'ccz'
</code></p>

<h2 id="lesson-6-catching-some-zzzs">Lesson 6: Catching some zzz’s</h2>

<p><strong>Pattern</strong>: <code>waz{2,4}up</code></p>

<p><code>ruby
Task	Text	 
match	'wazzzzup'
match	'wazzzup'
skip	'wazup'
</code></p>

<h2 id="lesson-7-mr-kleene-mr-kleene">Lesson 7: Mr. Kleene, Mr. Kleene</h2>

<p><strong>Pattern</strong>: <code>aa+b*c+</code> or <code>a{2,4}b{0,4}c{1,2}</code></p>

<p><code>ruby
Task	Text	 
match	'aaaabcc'
match	'aabbbbc'
match	'aacc'
skip	'a'
</code></p>

<h2 id="lesson-8-characters-optional">Lesson 8: Characters optional</h2>

<p>Pattern: <code>\d+ files? found\?</code></p>

<p><code>ruby
Task	Text	 
match	'1 file found?'
match	'2 files found?'
match	'24 files found?'
skip	'No files found.'
</code></p>

<h2 id="lesson-9-all-this-whitespace">Lesson 9: All this whitespace</h2>

<p><strong>Pattern</strong>: <code>\d\.\s+abc</code></p>

<p><code>ruby
Task	Text	 
match	'1.  abc'
match	'2.	  abc'
match	'3.      abc'
skip	'4.abc'
</code></p>

<h2 id="lesson-10-starting-and-ending">Lesson 10: Starting and ending</h2>

<p><strong>Pattern</strong>: <code>^Mission: successful$</code></p>

<p><code>ruby
Task	Text	 
match	'Mission: successful'
skip	'Last Mission: unsuccessful'
skip	'Next Mission: successful upon capture of target'
</code></p>

<h2 id="lesson-11-capturing-groups">Lesson 11: Capturing groups</h2>

<p>Regular expressions allow us to not just <strong>match text</strong> but also to <strong>extract information</strong> for further processing. This is done by defining <strong>groups of characters</strong> and capturing them using the special parentheses <code>(</code> and <code>)</code> metacharacters.</p>

<ul>
  <li><code>^(IMG\d+\.png)$</code>: capture and extract the full filename</li>
  <li><code>^(IMG\d+)\.png$</code>: capture the part before the period</li>
</ul>

<p><strong>Pattern</strong>: <code>^(file.+)\.pdf$</code></p>

<p><code>ruby
Task     Text                          Capture Groups	 
capture  'file_record_transcript.pdf'  'file_record_transcript'
capture  'file_07241999.pdf'           'file_07241999'
skip     'testfile_fake.pdf.tmp'
</code></p>

<h2 id="lesson-12-nested-groups">Lesson 12: Nested groups</h2>

<p><strong>Pattern</strong>: <code>(\w+ (\d+))</code></p>

<p><code>ruby
Task     Text        Capture Groups
capture  'Jan 1987'  'Jan 1987' '1987'
capture  'May 1969'  'May 1969' '1969'
capture  'Aug 2011'  'Aug 2011' '2011'
</code></p>

<h2 id="lesson-13-more-group-work">Lesson 13: More group work</h2>

<p><strong>Pattern</strong>: <code>((\d+)x(\d+))</code></p>

<p><code>ruby
Task     Text         Capture Groups
Capture  '1280x720'   '1280' '720'
Capture  '1920x1600'  '1920' '1600'
Capture  '1024x768'   '1024' '768'
</code></p>

<h2 id="lesson-14-its-all-conditional">Lesson 14: It’s all conditional</h2>

<p>Writing patterns with many conditions can be hard to read, so you should consider making them separate patterns if they get too complex.</p>

<p><strong>Pattern</strong>: <code>I love (cats|dogs)</code></p>

<p><code>ruby
Task   Text	 
match	 'I love cats'
match	 'I love dogs'
skip	 'I love logs'
skip	 'I love cogs'
</code></p>

<h2 id="lesson-15-other-special-characterss">Lesson 15: Other special characterss</h2>

<p><strong>Boundary</strong></p>

<ul>
  <li><code>\b</code>: boundary between a word and a non-word character</li>
  <li><code>\w+\b</code>: capturing entire words</li>
</ul>

<p><strong>Back Referencing</strong></p>

<ul>
  <li><code>\0</code>: the full matched text</li>
  <li><code>\1</code>: group 1</li>
  <li><code>\2</code>: group 2</li>
</ul>

<p>This is useful for example when you are in a text editor and doing a search and replace using regular expressions to swap two numbers, you can search for <code>(\d+)-(\d+)</code> and replace it with <code>\2-\1</code> to put the second captured number first, and the first captured number second for example.</p>

<p>Pattern: <code>.*</code></p>

<p><code>ruby
Task   Text	 
match  'The quick brown fox jumped over the lazy dog.'
match  'There were 614 instances of students getting 90.0% or above.'
match  'The FCC had to censor the network for saying &amp;$#*@!.'
</code></p>

<h2 id="problem-1-matching-a-decimal-numbers">Problem 1: matching a decimal numbers</h2>

<p><strong>Pattern</strong>: <code>^-?\d+(,\d+)*(\.\d+(e\d+)?)?$</code></p>

<p>Starts with an optional negative sign, one or more digits, optionally followed by a comma and more digits, followed by an optional fractional component which consists of a period, one or more digits, and another optional component, the exponent followed by more digits.</p>

<p><code>ruby
Task   Text 	 
match  '3.14529'
match  '-255.34'
match  '128'
match  '1.9e10'
match  '123,340.00'
skip   '720p'
</code></p>

<h2 id="problem-2-matching-phone-numbers">Problem 2: matching phone numbers</h2>

<p><strong>Pattern</strong>: <code>1?[\s-]?\(?(\d{3})\)?[\s-]?\d{3}[\s-]?\d{4}</code></p>

<p>This breaks down into the country code <code>1?</code>, the captured area code <code>\(?(\d{3})\)?</code>, and the rest of the digits <code>\d{3}</code> and <code>\d{4}</code> respectively. We use <code>[\s-]?</code> to catch the space or dashes between each component.</p>

<p><code>ruby
Task     Text              Capture Groups
capture  '415-555-1234'    '415'
capture  '650-555-2345'    '650'
capture  '(416)555-3456'   '416'
capture  '202 555 4567'    '202'
capture  '4035555678'      '403'
capture  '1 416 555 9292'  '416'
</code></p>

<h2 id="problem-3-matching-emails">Problem 3: matching emails</h2>

<p><strong>Pattern</strong>: <code>^([\w\.]*)(\+\w*)?@\w+\.?\w+.\w+</code></p>

<p>To extract the beginning of each email, we can use a simple expression <code>^([\w\.]*)</code> which will match emails starting with alphanumeric characters including the period. It will match up to the point in the text where it reaches an <code>@</code> or <code>+</code>.</p>

<p><code>ruby
Task     Text                                Capture Groups
capture  'tom@hogwarts.com'                  'tom'
capture  'tom.riddle@hogwarts.com'           'tom.riddle'
capture  'tom.riddle+regexone@hogwarts.com'  'tom.riddle'
capture  'tom@hogwarts.eu.com'               'tom'
capture  'potter@hogwarts.com'               'potter'
capture  'harry@hogwarts.com'                'harry'
capture  'hermione+regexone@hogwarts.com'    'hermione'
</code></p>

<h2 id="problem-4-matching-html">Problem 4: matching HTML</h2>

<p><strong>Pattern</strong>: <code>&lt;(\w+)</code></p>

<ul>
  <li>tag name: <code>&lt;(\w+)</code></li>
  <li>tag content: <code>&gt;([\w\s]*)&lt;</code></li>
  <li>attribute values: <code>='([\w://.]*)</code></li>
</ul>

<p><code>ruby
Task     Text                                      Capture Groups
capture  "&lt;a&gt;This is a link&lt;/a&gt;"                   "a"
capture  "&lt;a href='http://regexone.com'&gt;Link&lt;/a&gt;"  "a"
capture  "&lt;div class='test_style'&gt;Test&lt;/div&gt;"      "div"
capture  "&lt;div&gt;Hello &lt;span&gt;world&lt;/span&gt;&lt;/div&gt;"     "div"
</code></p>

<h2 id="problem-5-matching-specific-filenames">Problem 5: matching specific filenames</h2>

<p>Extract the filenames and extension types of <strong>only image files</strong> (not including temporary files for images currently being edited). Image files are defined as <code>.jpg</code>, <code>.png</code>, and <code>.gif</code>.</p>

<p><strong>Pattern</strong>: <code>(\w+)\.(jpg|png|gif)$</code></p>

<p><code>ruby
Task     Text                   Capture Groups 	 
skip     '.bash_profile'
skip     'workspace.doc'
capture  'img0912.jpg'          'img0912' 'jpg'
capture  'updated_img0912.png'  'updated_img0912' 'png'
skip     'documentation.html'
capture  'favicon.gif'          'favicon' 'gif'
skip     'img0912.jpg.tmp'
skip     'access.lock'
</code></p>

<h2 id="problem-6-trimming-whitespace-from-start-and-end-of-line">Problem 6: Trimming whitespace from start and end of line</h2>

<p>Write a simple regular expression to capture the content of each line, without the extra whitespace.</p>

<p><strong>Pattern</strong>: <code>^\s*(.*)\s*$</code></p>

<p>We can just skip all the starting and ending whitespace by not capturing it in a line.</p>

<p><code>ruby
Task     Text                            Capture Groups
capture  '  The quick brown fox... '     'The quick brown fox...'
capture  ' jumped over the lazy dog.  '  'jumped over the lazy dog.'
</code></p>

<h2 id="problem-7-extracting-information-from-a-log-file">Problem 7: Extracting information from a log file</h2>

<p>Extract the <strong>filename</strong>, <strong>method name</strong> and <strong>line number</strong> of line of the stack trace.</p>

<p>Pattern: <code>(\w+)\(([\w\.]+):(\d+)\)</code></p>

<p>The first capture group is the method, followed by an escaped parenthesis, followed by the filename, a colon, and finally the line number.</p>

<p><code>ruby
Task    Text                                                        Capture Groups
skip    'W/dalvikvm( 1553): threadid=1: uncaught exception'
skip    'E/( 1553): FATAL EXCEPTION: main'
skip    'E/( 1553): java.lang.StringIndexOutOfBoundsException'
capture 'E/( 1553):   at widget.List.makeView(ListView.java:1727)'  'makeView' 'ListView.java' '1727'
capture 'E/( 1553):   at widget.List.fillDown(ListView.java:652)'   'fillDown' 'ListView.java' '652'
capture 'E/( 1553):   at widget.List.fillFrom(ListView.java:709)'   'fillFrom' 'ListView.java' '709'
</code></p>

<h2 id="problem-8-parsing-and-extracting-data-from-a-url">Problem 8: Parsing and extracting data from a URL</h2>

<p><strong>URIs</strong>, or <em>Uniform Resource Identifiers</em>, are a representation of a resource that is generally composed of a <strong>scheme</strong>, <strong>host</strong>, <strong>port</strong> (optional), and <strong>resource path</strong>, respectively highlighted below.</p>

<p><code>http://regexone.com:80/page</code></p>

<p>The scheme describes the protocol to communicate with, the host and port describe the source of the resource, and the full path describes the location at the source for the resource.</p>

<p>In the exercise below, try to extract the <strong>protocol</strong>, <strong>host</strong> and <strong>port</strong> of the all the resources listed.</p>

<p><strong>Pattern</strong>: <code>^(\w+)://([\w\-\.]+):?(\d+)?</code></p>

<ul>
  <li>protocols: <code>(\w+)://</code></li>
  <li>hosts: <code>://([\w\-\.]+)</code></li>
  <li>ports: <code>(:(\d+))</code></li>
</ul>

<p><code>ruby
Task    Text                                                          Capture Groups
capture 'ftp://file_server.com:21/top_secret/life_changing_plans.pdf' 'ftp' 'file_server.com' '21'
capture 'http://regexone.com/lesson/introduction#section'             'http' 'regexone.com'
capture 'file://localhost:4040/zip_file'                              'file' 'localhost' '4040'
capture 'https://s3cur3-server.com:9999/'                             'https' 's3cur3-server.com' '9999'
capture 'market://search/angry%20birds'                               'market' 'search'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line Basics]]></title>
    <link href="http://NavySPACE.net/command-line-basics/"/>
    <updated>2016-03-01T06:15:00-08:00</updated>
    <id>http://NavySPACE.net/command-line-basics</id>
    <content type="html"><![CDATA[<p>Here is the notes I’ve taken while reading Codecademy’s course: <a href="https://codecademy.com/learn/learn-the-command-line">Learn the Command Line</a> and Launch School’s open book: <a href="https://launchschool.com/books/command_line">Introduction to the Command Line</a>.</p>

<p>The command line is a text interface for your computer. It’s a program that takes in commands, which it passes on to the computer’s operating system to run.</p>

<p>From the command line, you can navigate through files and folders on your computer, just as you would with Windows Explorer on Windows or Finder on Mac OS. The difference is that the command line is fully text-based.</p>

<p><br /></p>

<h1 id="lists">Lists</h1>

<h2 id="common-commands">Common Commands</h2>

<p>The following is a list of some of the most common commands used on the command line.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>cd</code></td>
      <td>Change directory.</td>
    </tr>
    <tr>
      <td><code>ls</code></td>
      <td>List files and directories in current directory.</td>
    </tr>
    <tr>
      <td><code>pwd</code></td>
      <td>Display the path of the current directory.</td>
    </tr>
    <tr>
      <td><code>touch</code></td>
      <td>Create a file.</td>
    </tr>
    <tr>
      <td><code>mkdir</code></td>
      <td>Create a directory.</td>
    </tr>
    <tr>
      <td><code>rm</code></td>
      <td>Remove a file or directory. Warning: deleting a file or directory with this command is permanent!</td>
    </tr>
    <tr>
      <td><code>cp</code></td>
      <td>Copy a file or directory.</td>
    </tr>
    <tr>
      <td><code>mv</code></td>
      <td>Move or rename a file or directory.</td>
    </tr>
    <tr>
      <td><code>echo</code></td>
      <td>Print text to STDOUT.</td>
    </tr>
    <tr>
      <td><code>cat</code></td>
      <td>Display contents of a file.</td>
    </tr>
    <tr>
      <td><code>more</code></td>
      <td>Display contents of a file, starting at the top and letting the user scroll down.</td>
    </tr>
    <tr>
      <td><code>less</code></td>
      <td>Display contents of a file in an even more interactive way.</td>
    </tr>
    <tr>
      <td><code>head</code></td>
      <td>Display the first part of a file.</td>
    </tr>
    <tr>
      <td><code>tail</code></td>
      <td>Display the last part of a file.</td>
    </tr>
    <tr>
      <td><code>man</code></td>
      <td>Display documentation about a command.</td>
    </tr>
  </tbody>
</table>

<h2 id="symbols">Symbols</h2>

<p>Some of the symbols that will help us navigate the command line:</p>

<table>
  <thead>
    <tr>
      <th>Symbol</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>/</code></td>
      <td>The root directory or a separator when listing directories</td>
    </tr>
    <tr>
      <td><code>.</code></td>
      <td>The current directory (also <code>./</code>) or the same level</td>
    </tr>
    <tr>
      <td><code>..</code></td>
      <td>The directory one level up (also <code>../</code>)</td>
    </tr>
    <tr>
      <td><code>../..</code></td>
      <td>Two levels up</td>
    </tr>
    <tr>
      <td><code>~</code></td>
      <td>Your home directory, or the directory you are placed in when you log in.</td>
    </tr>
    <tr>
      <td><code>*</code></td>
      <td>The splat or glob operator. This is the wildcard of the command line and represents “any characters.”</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h1 id="concepts">Concepts</h1>

<p><strong>Executables</strong></p>

<ul>
  <li>A command is just a file. <code>ls</code>, <code>mkdir</code>, and <code>cd</code> are all files.</li>
  <li>Files that can be used as commands are called <strong>executables</strong>.</li>
</ul>

<p><strong>What makes an executable different from other files?</strong></p>

<ul>
  <li>They have <strong>special characters</strong> at the <strong>beginning</strong> to tell the computer how to execute them.</li>
  <li>They have <strong>scripts</strong> or <strong>machine language</strong> as their content.</li>
  <li>
    <p>They have the executable <strong>permission</strong>.</p>

    <p>To run an executable, you just type its path as the first part of your input, then type in your arguments, and hit enter, like this:</p>

    <p><code>bash
$ /bin/echo "Hello World"
Hello World
</code></p>
  </li>
</ul>

<p><br /></p>

<h1 id="navigation">Navigation</h1>

<p>Get up and running with the command line by navigating directories and files.</p>

<h2 id="pwd"><code>pwd</code></h2>

<p><code>pwd</code>: <strong>print working directory</strong></p>

<p><code>bash
$ pwd
/home/ccuser/workspace/blog
</code></p>

<h2 id="ls"><code>ls</code></h2>

<p><code>ls</code> <strong>lists</strong> all files and directories in the working directory</p>

<p><code>bash
$ ls
2014  2015  hardware.txt
</code></p>

<p><code>ls -a</code> lists <strong>all</strong> contents in the working directory, including <em>hidden files</em> and <em>directories</em></p>

<p><code>bash
$ ls -a
.  ..  .preferences  action  drama comedy  genres.xt
</code></p>

<p><code>ls -l</code> lists all contents of a directory in <strong>long</strong> format. <a href="https://www.codecademy.com/en/courses/learn-the-command-line/lessons/manipulation/exercises/ls-revisited">Here</a> is what each column means.</p>

<ol>
  <li>Access rights. These are actions that are permitted on a file or directory.</li>
  <li>Number of hard links. This number counts the number of child directories and files. This number includes the parent directory link (..) and current directory link (.).</li>
  <li>The username of the file’s owner. Here the username is <code>cc</code>.</li>
  <li>The name of the group that owns the file. Here the group name is <code>eng</code>.</li>
  <li>The size of the file in bytes.</li>
  <li>The date &amp; time that the file was last modified.</li>
  <li>The name of the file or directory.</li>
</ol>

<p><code>bash
$ ls -l
drwxr-xr-x 5  cc  eng  4096 Jun 24 16:51  action
drwxr-xr-x 4  cc  eng  4096 Jun 24 16:51  comedy
drwxr-xr-x 6  cc  eng  4096 Jun 24 16:51  drama
-rw-r--r-- 1  cc  eng     0 Jun 24 16:51  genres.txt
</code></p>

<p><code>ls -t</code> orders files and directories by the time they were last modified.</p>

<p><code>bash
$ ls -t
</code></p>

<p>Multiple options can be used together.</p>

<p><code>bash
$ ls -alt
</code></p>

<h2 id="cd"><code>cd</code></h2>

<p><code>cd</code>: <strong>change directory</strong>, takes a directory name as an argument, and switches into that directory.</p>

<p><code>bash
$ cd Desktop/
</code></p>

<p>To navigate directly to a directory, use <code>cd</code> with the directory’s path as an argument. Here, <code>cd jan/memory/</code> command navigates directly to the <code>jan/memory</code> directory.</p>

<p><code>bash
$ cd jan/memory
</code></p>

<p>To move up one directory, use <code>cd ..</code>. Here, <code>cd ..</code> navigates up from <code>jan/memory/</code> to <code>jan/</code>.</p>

<p><code>bash
$ cd ..
</code></p>

<h2 id="mkdir"><code>mkdir</code></h2>

<p><code>mkdir</code>: <strong>make directory</strong>, takes in a directory name as an argument, and then creates a new directory in the current working directory. Here we used <code>mkdir</code> to create a new directory named <code>media/</code>.</p>

<p><code>bash
$ mkdir media
</code></p>

<h2 id="touch"><code>touch</code></h2>

<p><code>touch</code> <strong>creates a new file</strong> inside the working directory. It takes in a file name as an argument, and then creates a new empty file in the current working directory. Here we used <code>touch</code> to create a new file named <code>keyboard.txt</code> inside the current working directory.</p>

<p>If the file exists, <code>touch</code> is used to update the modification time of the file</p>

<p><code>bash
$ touch data.txt
</code></p>

<p><br /></p>

<h1 id="manipulation">Manipulation</h1>

<p>We can also use the command line to <strong>copy</strong>, <strong>move</strong>, and <strong>remove</strong> files and directories.</p>

<h2 id="cp"><code>cp</code></h2>

<p><code>cp</code> <strong>copies</strong> files or directories. Here, we copy the file <code>lincoln.txt</code> and place it in the <code>historical/</code> directory.</p>

<p><code>bash
$ cp lincoln.txt historical/
</code></p>

<p>The wildcard <code>*</code> selects in the working directory, so here we use <code>cp</code> to copy all files into the <code>satire/</code> directory.</p>

<p><code>bash
$ cp * satire/
</code></p>

<p><code>m*.txt</code> selects all files in the working directory starting with <strong>m</strong> and ending with <strong>.txt</strong>, and copies them to <code>scifi/</code>.</p>

<p><code>bash
$ cp m*.txt scifi/
</code></p>

<h2 id="mv"><code>mv</code></h2>

<p>To <strong>move</strong> a file into a directory, use <code>mv</code> with the source file as the first argument and the destination directory as the second argument. Here we move <code>superman.txt</code> into <code>superhero/</code>.</p>

<p><code>bash
$ mv superman.txt superhero/
</code></p>

<p>Move <strong>multiple</strong> files into a directory.</p>

<p><code>bash
$ mv wonderwoman.txt batman.txt superhero/
</code></p>

<p><strong>Rename</strong> the file <code>batman.txt</code> to <code>spiderman.txt</code>.</p>

<p><code>bash
$ mv batman.txt spiderman.txt
</code></p>

<h2 id="rm"><code>rm</code></h2>

<p><code>rm</code> deletes files. Here we <strong>remove</strong> the file <code>waterboy.txt</code> from the file system.</p>

<p><code>bash
$ rm waterboy.txt
</code></p>

<p><code>rm -r</code> deletes a <strong>directory</strong> and all of its child directories.</p>

<p><code>bash
$ rm -r comedy
</code>
<br /></p>

<h1 id="redirection">Redirection</h1>

<p>Learn to redirect input and output to and from files and programs.</p>

<ul>
  <li><strong>Standard Input</strong>, abbreviated as <code>stdin</code>, is information inputted into the terminal through the keyboard or input device.</li>
  <li><strong>Standard Output</strong>, abbreviated as <code>stdout</code>, is the information outputted after a process is run.</li>
  <li><strong>Standard Error</strong>, abbreviated as <code>stderr</code>, is an error message outputted by a failed process.</li>
</ul>

<h2 id="echo"><code>echo</code></h2>

<p>The <code>echo</code> command accepts the string “Hello” as standard input, and <strong>echoes</strong> the string “Hello” back to the terminal as standard output.</p>

<p><code>bash
$ echo "Hello"
Hello
</code></p>

<h2 id="cat"><code>cat</code></h2>

<p>The <code>cat</code> command outputs the contents of a file to the terminal. When you type <code>cat hello.txt</code>, the contents of <code>hello.txt</code> are displayed.</p>

<p><strong>Catenate</strong> is an obscure word meaning “to connect in a series”, which is what the <code>cat</code> command does to one or more files.</p>

<p><code>bash
$ cat hello.txt
Hello
</code></p>

<h2 id="section"><code>&gt;</code></h2>

<p>The <code>&gt;</code> command redirects the standard output to a file.</p>

<p><code>bash
$ echo "Hello" &gt; hello.txt
</code></p>

<p><code>&gt;</code> takes the standard output of the command on the left, and redirects it to the file on the right. Note that <code>&gt;</code> <strong>overwrites</strong> all original content in <code>continents.txt</code>.</p>

<p><code>bash
$ cat oceans.txt &gt; continents.txt
</code></p>

<h2 id="section-1"><code>&gt;&gt;</code></h2>

<p><code>&gt;&gt;</code> takes the standard output of the command on the left and <strong>appends</strong> (adds) it to the file on the right.</p>

<p><code>bash
$ cat glaciers.txt &gt;&gt; rivers.txt
</code></p>

<h2 id="section-2"><code>&lt;</code></h2>

<p><code>&lt;</code> takes the standard input from the file on the right and <strong>inputs</strong> it into the program on the left. Here, <code>lakes.txt</code> is the standard input for the <code>cat</code> command. The standard output appears in the terminal.</p>

<p><code>bash
$ cat &lt; lakes.txt
</code></p>

<h2 id="section-3"><code>|</code></h2>

<p><code>|</code> is a <strong>pipe</strong>. The <code>|</code> takes the standard output of the command on the left, and pipes it as standard input to the command on the right. You can think of this as “command to command” redirection.</p>

<p>Here the output of <code>cat volcanoes.txt</code> is the standard input of <code>wc</code>. In turn, the <code>wc</code> command outputs the <strong>number of lines, words, and characters</strong> in <code>volcanoes.txt</code>, respectively.</p>

<p><code>bash
$ cat volcanoes.txt | wc
</code></p>

<p>Multiple <code>|</code>s can be chained together. Here the standard output of <code>cat volcanoes.txt</code> is “piped” to the <code>wc</code> command. The standard output of <code>wc</code> is then “piped” to <code>cat</code>. Finally, the standard output of <code>cat</code> is redirected to <code>islands.txt</code>.</p>

<p><code>bash
$ cat volcanoes.txt | wc | cat &gt; islands.txt
</code></p>

<h2 id="sort"><code>sort</code></h2>

<p><code>sort</code> takes the standard input and orders it alphabetically for the standard output. Here, the lakes in <code>sort lakes.txt</code> are listed in alphabetical order.</p>

<p><code>bash
$ sort lakes.txt
</code></p>

<p>Here, the command takes the standard output from <code>cat lakes.txt</code> and “pipes” it to <code>sort</code>. The standard output of <code>sort</code> is redirected to <code>sorted-lakes.txt</code>.</p>

<p><code>bash
$ cat lakes.txt | sort &gt; sorted-lakes.txt
</code></p>

<h2 id="uniq"><code>uniq</code></h2>

<p><code>uniq</code> stands for <strong>unique</strong> and filters out adjacent, duplicate lines in a file. Here <code>uniq deserts.txt</code> filters out duplicates of “Sahara Desert”, because the duplicate of ‘Sahara Desert’ directly follows the previous instance. The “Kalahari Desert” duplicates are not adjacent, and thus remain.</p>

<p><code>bash
$ uniq deserts.txt
</code></p>

<p>A more effective way to call <code>uniq</code> is to call <code>sort</code> to alphabetize a file, and “pipe” the standard output to <code>uniq</code>. Here by piping <code>sort deserts.txt</code> to <code>uniq</code>, all duplicate lines are alphabetized (and thereby made adjacent) and filtered out.</p>

<p><code>bash
$ sort deserts.txt | uniq
</code></p>

<p>Send filtered contents to <code>uniq-deserts.txt</code>.</p>

<p><code>bash
sort deserts.txt | uniq &gt; uniq-deserts.txt
</code></p>

<h2 id="grep"><code>grep</code></h2>

<p><code>grep</code> stands for <strong>global regular expression print</strong>. It searches files for lines that match a pattern and returns the results. It is case <em>sensitive</em>.</p>

<p>You can use <strong>regular expressions</strong> to search for patterns in files.</p>

<p><code>bash
$ grep Mount mountains.txt
</code></p>

<p><code>grep -i</code> enables the command to be case <em>insensitive</em>.</p>

<p><code>bash
$ grep -i Mount mountains.txt
</code></p>

<p><code>grep -R</code> searches all files in a <strong>directory</strong> and outputs filenames and lines containing matched results. <code>-R</code> stands for <strong>recursive</strong>.</p>

<p><code>bash
$ grep -R Arctic /home/ccuser/workspace/geography
/home/ccuser/workspace/geography/deserts.txt:Arctic Desert
/home/ccuser/workspace/geography/oceans.txt:Arctic Ocean
/home/ccuser/workspace/geography/uniq-deserts.txt:Arctic Desert
/home/ccuser/workspace/geography/continents.txt:Arctic Ocean
</code></p>

<p><code>grep -Rl</code> searches all files in a directory and outputs only filenames with matched results. <code>-R</code> stands for <strong>recursive</strong> and <code>l</code> stands for <strong>files with matches</strong>.</p>

<p><code>bash
$ grep -Rl Arctic /home/ccuser/workspace/geography
/home/ccuser/workspace/geography/deserts.txt
/home/ccuser/workspace/geography/oceans.txt
/home/ccuser/workspace/geography/uniq-deserts.txt
/home/ccuser/workspace/geography/continents.txt
</code></p>

<h2 id="sed"><code>sed</code></h2>

<p><code>sed</code> stands for <strong>stream editor</strong>. It accepts standard input and modifies it based on an expression, before displaying it as output data.</p>

<p><code>bash
$ sed 's/snow/rain/' forests.txt
</code></p>

<p>In the expression <code>'s/snow/rain/'</code>:</p>

<ul>
  <li><code>s</code>: stands for <strong>substitution</strong>.</li>
  <li><code>snow</code>: the search string, the text to find.</li>
  <li><code>rain</code>: the replacement string, the text to add in place.</li>
</ul>

<p>In this case, <code>sed</code> searches <code>forests.txt</code> for the word “snow” and replaces it with “rain.” Importantly, the above command will only replace the <strong>first instance</strong> of “snow” on a line.</p>

<p><code>bash
$ sed 's/snow/rain/g' forests.txt
</code></p>

<p>The above command uses the <code>g</code> expression, meaning <strong>global</strong>. Here <code>sed</code> searches <code>forests.txt</code> for the word “snow” and replaces it with “rain”, globally. All instances of “snow” on a line will be turned to “rain”.</p>

<p><br /></p>

<h1 id="environment">Environment</h1>

<p>Each time we launch the terminal application, it creates a new session. The session immediately loads <em>settings</em> and <em>preferences</em> that make up the command line environment.</p>

<p>We can configure the environment to support the commands and programs we create. This enables us to customize greetings and command <strong>aliases</strong>, and create <strong>variables</strong> to share across commands and programs.</p>

<h2 id="clear"><code>clear</code></h2>

<p><strong>Clear</strong> the terminal window. The command prompt should now be at the top of the window.</p>

<p><code>bash
$ clear
</code></p>

<h2 id="nano"><code>nano</code></h2>

<p><code>nano</code> is a command line text editor. It works just like a desktop text editor like TextEdit or Notepad, except that it is accessible from the the command line and only accepts keyboard input.</p>

<ul>
  <li><code>Ctrl + O</code> saves a file. ‘O’ stands for <strong>output</strong>.</li>
  <li><code>Ctrl + X</code> exits the nano program. ‘X’ stands for <strong>exit</strong>.</li>
  <li><code>Ctrl + G</code> opens a <strong>help</strong> menu.</li>
</ul>

<p><code>bash
$ nano hello.txt
</code></p>

<h2 id="bashprofile"><code>~/.bash_profile</code></h2>

<p><code>~/.bash_profile</code> or <code>.bashrc</code> is the name of file used to <strong>store environment settings</strong>. It is commonly called the <em>bash profile</em>. When a session starts, it will load the contents of the bash profile before executing commands.</p>

<ul>
  <li>The <code>~</code> represents the user’s <strong>home directory</strong>.</li>
  <li>The <code>.</code> indicates a <strong>hidden</strong> file.</li>
  <li>The name <code>~/.bash_profile</code> is important, since this is how the command line recognizes the bash profile.</li>
</ul>

<p><code>bash
$ nano ~/.bash_profile
</code></p>

<h2 id="source"><code>source</code></h2>

<p><code>source</code> <strong>activates the changes</strong> in <code>~/.bash_profile</code> for the current session. Instead of closing the terminal and needing to start a new session, <code>source</code> makes the changes available right away in the session we are in.</p>

<p><code>bash
$ source ~/.bash_profile
</code></p>

<h2 id="alias"><code>alias</code></h2>

<p>The <code>alias</code> command allows you to create keyboard shortcuts, or <strong>aliases</strong>, for commonly used commands.</p>

<p><code>bash
$ alias pd="pwd"
</code></p>

<h2 id="history"><code>history</code></h2>

<p>Show command histories.</p>

<p><code>bash
$ history
1 nano hello.txt
2 clear
3 nano ~/.bash_profile
4 clear
</code></p>

<p><br /></p>

<h1 id="environment-variables">Environment Variables</h1>

<p><strong>Environment Variables</strong> are variables that can be used across commands and programs and hold information about the environment.</p>

<h2 id="export"><code>export</code></h2>

<p>The line <code>USER="Jane Doe"</code> sets the environment variable <code>USER</code> to a name “Jane Doe”. Usually the <code>USER</code> variable is set to the name of the computer’s owner.</p>

<p>The line <code>export</code> makes the variable to be <strong>available</strong> to all child sessions initiated from the session you are in. This is a way to make the variable persist across programs.</p>

<p><code>bash
export USER="Jane Doe"
</code></p>

<p><code>$</code> is always used when returning a variable’s value. Here, the command <code>echo $USER</code> returns the name set for the variable.</p>

<p><code>bash
$ echo $USER
Jane Doe
</code></p>

<h2 id="ps1"><code>PS1</code></h2>

<p><code>PS1</code> is a variable that defines the makeup and style of the <strong>command prompt</strong>. Here we change the default command prompt from $ to ».</p>

<p><code>bash
$ export PS1="&gt;&gt; "
$ source ~/.bash_profile
&gt;&gt;
</code></p>

<h2 id="home"><code>HOME</code></h2>

<p>The <code>HOME</code> variable is an environment variable that displays the path of the <strong>home directory</strong>.</p>

<p><code>bash
$ echo $HOME
/home/ccuser
</code></p>

<h2 id="path"><code>PATH</code></h2>

<p><code>PATH</code> is an environment variable that stores a list of directories separated by a colon. Each directory contains scripts for the command line to execute. <code>PATH</code> lists which <strong>directories contain scripts</strong>.</p>

<p><code>bash
$ echo $PATH
/home/ccuser/.gem/ruby/2.0.0/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin
</code></p>

<h2 id="env"><code>env</code></h2>

<p>The <code>env</code> command stands for <strong>environment</strong>, and returns a list of the environment variables for the current user.</p>

<p><code>bash
$ env
</code></p>

<p><code>env | grep PATH</code> is a command that displays the value of a single environment variable (=PATH).</p>

<p><code>bash
$ env | grep PATH
</code></p>

<p><br /></p>

<h1 id="permissions">Permissions</h1>

<p><strong>Overview</strong></p>

<ul>
  <li>3 levels of <em>ownership</em>: <strong>user</strong>, <strong>group</strong>, and <strong>other</strong></li>
  <li>3 <em>access types</em>: <strong>r</strong>ead, <strong>w</strong>rite, and e<strong>x</strong>ecute.</li>
</ul>

<p><code>
# +-------- Directory or not
# |  +------- User Read, Write, Execute
# |  |   +------- Group Read, Execute
# |  |   |   +----- Other Read, Execute
# |  |   |   |   +--- The name of the user
# |  |   |   |   |     +--- The name of the group
# |  |   |   |   |     |
# d|rwx|r-x|r-x user group
</code></p>

<p><strong>Setting Permissions</strong></p>

<p>``` bash
$ ls -lah test.txt
-rwxr–r–  1 bob  staff  1GB Jul 14 15:24 test.txt</p>

<p>$ # Remove write access for user
$ chmod u-w test.txt
$ ls -lah test.txt
-r-xr–r–  1 bob  staff  1GB Jul 14 15:24 test.txt</p>

<p>$ # Add execute access for group
$ chmod g+x test.txt
$ ls -lah test.txt
-r-xr-xr–  1 bob  staff  1GB Jul 14 15:24 test.txt
```</p>

<p><strong>Number &amp; Access level</strong></p>

<table>
  <thead>
    <tr>
      <th>Number</th>
      <th>Permission</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>No permission granted.</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Can execute.</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Can write.</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Can write and execute (2 + 1 = 3).</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Can read.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Can read and execute (4 +1 = 5).</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Can read and write (4 + 2 = 6).</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Can read and write and execute (4 + 2 + 1 = 7).</td>
    </tr>
  </tbody>
</table>

<p>``` bash
$ chmod 777 test.sh
$ ls -l test.sh
-rwxrwxrwx  1 bob admin 0B Jul 15 15:24 test.sh</p>

<p>$ chmod 000 test.sh
$ ls -l test.sh
———-  1 bob admin 0B Jul 15 15:24 test.sh</p>

<p>$ chmod 754 test.sh
$ ls -l test.sh
-rwxr-xr–  1 bob admin 0B Jul 15 15:24 test.sh
```</p>

<p><strong>Users and Groups</strong></p>

<p>Users can belong to multiple groups, and groups can have multiple users. If a user belongs to a group, it will have the access types granted to the assigned group of any file or directory.</p>

<p>To determine if your user is part of a certain group, use the <code>groups</code> command:</p>

<p><code>bash
$ groups
ubuntu adm dialout cdrom floppy sudo audio dip video plugdev
</code></p>

<p><strong>Root user</strong></p>

<p>The root user is the super user—it can read, write, and delete any file, but cannot execute just any file.</p>

<p>If you are logged in as a non-root user and know the root user’s password, you can switch to the root user account at any time with the following command:</p>

<p><code>bash
$ su -
Password:
</code></p>

<p><strong><code>sudo</code></strong></p>

<p>The <code>sudo</code> command allows you to “do” something as a “super user.” When you use this command, you will usually be required to input a password; but instead of the root user’s password, you’ll be putting in <strong>your own password</strong>.</p>

<p>Why <code>sudo</code></p>

<ul>
  <li>The server administrator wants you to have root access for some commands and/or directories, but not for everything. In this case the administrator will set up sudo to have restrictions or whitelisted commands.</li>
  <li>Running commands while logged in as root can be dangerous. Using a non-root user makes it obvious when you are running a command that requires root privileges because you have to prefix your command with sudo.</li>
  <li>The sudo command provides a detailed audit trail so that system administrators can track what commands individuals used on system files.</li>
  <li>Sudo uses a ticketing system where you put in your password once, then you don’t have to until you haven’t run any sudo commands for five minutes or longer. This adds security to your command line session, preventing others from gaining root access if you leave your Terminal open on accident.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass Basics]]></title>
    <link href="http://NavySPACE.net/sass-basics/"/>
    <updated>2016-02-23T13:20:00-08:00</updated>
    <id>http://NavySPACE.net/sass-basics</id>
    <content type="html"><![CDATA[<p>Sass (stands for <strong>S</strong>yntactically <strong>A</strong>wesome <strong>S</strong>tyle <strong>S</strong>heets) is a powerful CSS extension language as well as preprocessor that can be a useful tool to make web developers efficient for writing CSS. Here is the note I was taking while reading a concise <a href="http://sass-lang.com/guide">guide</a> to Sass from its official site.</p>

<h2 id="syntax">Syntax</h2>

<p>There are two syntaxes available for Sass.</p>

<p><strong>SCSS</strong> (Sassy CSS) is an extension of the syntax of CSS.</p>

<ul>
  <li>Using <code>.scss</code> extension.</li>
  <li>Every valid CSS stylesheet is a valid SCSS file</li>
  <li>Enhanced with the Sass features</li>
  <li>Understands most CSS hacks and vendor-specific syntax</li>
</ul>

<p>``` scss
$primary-color: #333;</p>

<p>body {
  color: $primary-color;
}
```</p>

<p><strong>Sass</strong>, The older syntax, provides a more concise way of writing CSS.</p>

<ul>
  <li>Using <code>.scss</code> extension.</li>
  <li><strong>Indentation</strong> rather than <code>{}</code> to indicate nesting of selectors</li>
  <li><strong>Newlines</strong> rather than <code>;</code> to separate properties</li>
</ul>

<p>``` sass
$primary-color: #333</p>

<p>body
  color: $primary-color
```</p>

<p>Either syntax can <strong>import</strong> files written in the other.</p>

<p>Files can be automatically converted from one syntax to the other using the <code>sass-convert</code> command line tool:</p>

<p>``` bash
# Convert Sass to SCSS
$ sass-convert style.sass style.scss</p>

<h1 id="convert-scss-to-sass">Convert SCSS to Sass</h1>
<p>$ sass-convert style.scss style.sass
```</p>

<h2 id="preprocessing">Preprocessing</h2>

<p>Sass take your preprocessed Sass file and save it as a normal CSS file that you can use in your web site.</p>

<p>``` bash
# run Sass from the command line
sass input.scss output.css</p>

<h1 id="watch-the-file-update-the-css-every-time-the-sass-file-changes">watch the file, update the CSS every time the Sass file changes</h1>
<p>sass –watch input.scss:output.css</p>

<h1 id="watch-the-entire-directory-with-many-sass-files">watch the entire directory with many Sass files</h1>
<p>sass –watch app/sass:public/stylesheets
```</p>

<h2 id="variables">Variables</h2>

<p>You can store things like colors, font stacks, or any CSS value you think you’ll want to reuse. Sass uses the <code>$</code> symbol to make something a variable.</p>

<p><code>SCSS</code></p>

<p>``` scss
$font-stack:    Helvetica, sans-serif;
$primary-color: #333;</p>

<p>body {
  font: 100% $font-stack;
  color: $primary-color;
}
```</p>

<p><code>CSS</code></p>

<p><code>css
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
</code></p>

<h2 id="nesting">Nesting</h2>

<p>Sass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML.</p>

<p><code>SCSS</code></p>

<p>``` scss
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }</p>

<p>li { display: inline-block; }
}
```</p>

<p><code>CSS</code></p>

<p>``` css
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}</p>

<p>nav li {
  display: inline-block;
}
```</p>

<h2 id="partials--import">Partials &amp; Import</h2>

<p>Using partials is a great way to modularize your CSS and help keep things easier to maintain.</p>

<ul>
  <li>Name partials with a leading underscore, like <code>_partial.scss</code></li>
  <li>Sass partials are used with the <code>@import</code> directive.</li>
</ul>

<p><code>SCSS</code></p>

<p>``` scss
// _reset.scss</p>

<p>html,
body,
ul,
ol {
   margin: 0;
  padding: 0;
}
```</p>

<p>``` scss
// base.scss</p>

<p>@import ‘reset’;</p>

<p>body {
  font: 100% Helvetica, sans-serif;
  background-color: #efefef;
}
```</p>

<p><code>CSS</code></p>

<p>``` css
html, body, ul, ol {
  margin: 0;
  padding: 0;
}</p>

<p>body {
  font: 100% Helvetica, sans-serif;
  background-color: #efefef;
}
```</p>

<h2 id="mixins">Mixins</h2>

<p>A mixin lets you make groups of CSS declarations that you want to reuse throughout your site.</p>

<ul>
  <li>Pass in values to make your mixin more flexible</li>
  <li>A good use of a mixin is for vendor prefixes</li>
</ul>

<p><code>SCSS</code></p>

<p>``` scss
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}</p>

<p>.box { @include border-radius(10px); }
```</p>

<p><code>CSS</code></p>

<p><code>css
.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}
</code></p>

<h2 id="extendinheritance">Extend/Inheritance</h2>

<p>Using <code>@extend</code> lets you share a set of CSS properties from one selector to another. It helps keep your Sass very <strong>DRY</strong>.</p>

<p><code>SCSS</code></p>

<p>``` scss
.message {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}</p>

<p>.success {
  @extend .message;
  border-color: green;
}</p>

<p>.error {
  @extend .message;
  border-color: red;
}</p>

<p>.warning {
  @extend .message;
  border-color: yellow;
}
```</p>

<p><code>CSS</code></p>

<p>``` css
.message, .success, .error, .warning {
  border: 1px solid #cccccc;
  padding: 10px;
  color: #333;
}</p>

<p>.success {
  border-color: green;
}</p>

<p>.error {
  border-color: red;
}</p>

<p>.warning {
  border-color: yellow;
}
```</p>

<h2 id="operators">Operators</h2>

<p>Doing math in your CSS is very helpful. Sass has a handful of standard math operators like <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>%</code>.</p>

<p><code>SCSS</code></p>

<p>``` scss
.container { width: 100%; }</p>

<p>article[role=”main”] {
  float: left;
  width: 600px / 960px * 100%;
}</p>

<p>aside[role=”complementary”] {
  float: right;
  width: 300px / 960px * 100%;
}
```</p>

<p><code>CSS</code></p>

<p>``` css
.container {
  width: 100%;
}</p>

<p>article[role=”main”] {
  float: left;
  width: 62.5%;
}</p>

<p>aside[role=”complementary”] {
  float: right;
  width: 31.25%;
}
```</p>
]]></content>
  </entry>
  
</feed>
