<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codecademy | @navyboys]]></title>
  <link href="http://NavySPACE.net/blog/categories/codecademy/atom.xml" rel="self"/>
  <link href="http://NavySPACE.net/"/>
  <updated>2016-04-28T22:10:06-07:00</updated>
  <id>http://NavySPACE.net/</id>
  <author>
    <name><![CDATA[NavySPACE.net]]></name>
    <email><![CDATA[navyboys@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Basics]]></title>
    <link href="http://NavySPACE.net/blog/css-basics/"/>
    <updated>2016-02-10T06:28:00-08:00</updated>
    <id>http://NavySPACE.net/blog/css-basics</id>
    <content type="html"><![CDATA[<p>Here is the notes I’ve taken while reading CSS part of Codecademy’s web fundamentals course: HTML &amp; CSS. It is not clear enough compared with <em>CSS Glossary</em>, that is also summarized by Codecademy and can be treated as a fantastic CSS cheat sheet.</p>

<h2 id="concepts">Concepts</h2>

<p>CSS, which stands for <strong>Cascading Style Sheets</strong>, is a language used to describe the appearance and formatting of your HTML.</p>

<ul>
  <li>A <strong>style sheet</strong> is a file that describes how an HTML file should look.</li>
  <li>We say these style sheets are <strong>cascading</strong> because the sheets can apply formatting when more than one style applies.</li>
</ul>

<h2 id="why-separate-form-from-function">Why separate form from function?</h2>

<p>You can apply the same formatting <strong>to several HTML elements</strong> without rewriting code over and over.
You can apply similar appearance and formatting <strong>to several HTML pages</strong> from a single CSS file</p>

<h2 id="three-ways-to-insert-css">Three Ways to Insert CSS</h2>

<p>inline styling</p>

<p><code>html
&lt;p style="color:red"&gt;Red font!&lt;/p&gt;
</code></p>

<p>in the <code>&lt;head&gt;</code></p>

<p>``` html</p>
<html>
  <head>
    <style>
      p {
        color: purple;
        }
	  </style>
  </head>
  <body>
  </body>
</html>
<p>```</p>

<p>in separate file</p>

<p>``` html</p>
<html>
  <head>
    <link type="text/css" rel="stylesheet" href="stylesheet.css" />
  </head>
  <body>
  </body>
</html>
<p>```</p>

<h2 id="one-selector-many-properties">One selector, many properties</h2>

<p>You can set many properties for one selector.</p>

<p><code>css
p {
  font-family: Arial;
  color: blue;
  font-size: 24px;
}
</code></p>

<h2 id="comments">Comments</h2>

<p>The stuff inside the <code>/*</code> <code>*/</code> marks are CSS comments.</p>

<p><code>css
/* I'm a comment! */
</code></p>

<h2 id="color">Color</h2>

<p>CSS understand millions of colors in the form of <strong>hexadecimal values</strong>.</p>

<p><code>css
h1 {
  color: #8B1C69;
}
</code></p>

<ul>
  <li>Hexadecimal counting is <strong>base-16</strong>. Each digit can be the numbers 0 through 9 or the letters <strong>a</strong> through <strong>f</strong>!</li>
  <li>Hex values are <strong>case-insensitive</strong>: that is, they don’t care about capitalization. <code>#FFC125</code> and <code>#ffc125</code> are the same color.</li>
</ul>

<h2 id="pixels-and-ems">Pixels and ems</h2>

<p>A <strong>pixel</strong> is a dot on your computer screen. Specifying font sizes in pixels is great when you want the user to see exactly on their screen what you designed on yours, though it assumes your screens are of similar size.
The font-size unit <strong>em</strong> is a relative measure: one <code>em</code> is equal to the default font size on whatever screen the user is using. That makes it great for smartphone screens, since it doesn’t try to tell the smartphone exactly how big to make a font: it just says, “Hey, <code>1em</code> is the font size that you normally use, so <code>2em</code> is twice as big and <code>0.5em</code> is half that size!”</p>

<p><code>css
p {
  font-size: 0.5em;
}
</code></p>

<h2 id="font">Font</h2>

<p>Most computers will understand popular fonts like <code>Verdana</code>, <code>Courier</code>, and <code>Garamond</code>, but each individual computer has different fonts installed on it. CSS has some <strong>built-in</strong> defaults meant to ensure your users see what you intend. They are:</p>

<ul>
  <li><strong>serif</strong>: A font with little decorative bits on the ends of the strokes that make up letters.</li>
  <li><strong>sans-serif</strong>: A plain-looking font, like this one. It doesn’t have the little doohickies on the ends of letters like a serif font does.</li>
  <li><strong>cursive</strong>: A scripty font! It looks like cursive writing.</li>
</ul>

<h2 id="backup-values">Backup values</h2>

<p>You can tell CSS to try several fonts, going from one to the next if the one you want isn’t available.</p>

<p><code>css
p {
  font-family: Tahoma, Verdana, sans-serif;
}
</code></p>

<h2 id="bordering">Bordering</h2>

<p>The border property supports several values.</p>

<p><code>css
selector {
  border: 2px solid red;
}
</code></p>

<h2 id="links-and-text-decoration">Links and text decoration</h2>

<p>Links have a property, text-decoration, that you can change to give your links a little more custom flair.</p>

<p><code>css
a {
  color: #cc0000;
  text-decoration: none;
}
</code></p>

<h2 id="multiple-selectors">Multiple Selectors</h2>

<p>Select only the h3 header nested inside three <code>&lt;div&gt;</code>s</p>

<p><code>css
div div div h3 {
    color: red;
}
</code></p>

<h2 id="universal-selector">Universal selector</h2>

<p>One selector to rule them all</p>

<p><code>css
* {
    border: 2px solid black;
}
</code></p>

<h2 id="children">Children</h2>

<p>Grab direct children</p>

<p><code>css
div &gt; p { /* Some CSS */ }
</code></p>

<h2 id="override">Override</h2>

<p>Certain selectors will <em>override</em> others if they have a greater specificity value.</p>

<ul>
  <li><code>ul li p {</code> is more specific CSS than just <code>p {</code>, so when CSS sees tags that are both <code>&lt;p&gt;</code> tags and happen to be inside unordered lists, it will apply the more specific styling (<code>ul li p {</code>) to the text inside the lists.</li>
  <li>There are two selectors that are even more specific than nested selectors like the ones above: <strong>classes</strong> and <strong>IDs</strong>.</li>
</ul>

<h2 id="class">Class</h2>

<p>Classes are useful when you have a bunch of elements that should all receive the same styling</p>

<p><code>html
&lt;!-- html --&gt;
&lt;div class="square"&gt;&lt;/div&gt;
&lt;img class="square"/&gt;
&lt;td class="square"&gt;&lt;/td&gt;
</code></p>

<p><code>css
/* css */
.square {
  height: 100px;
  width: 100px;
}
</code></p>

<h2 id="id">ID</h2>

<p>IDs are great for when you have exactly one element that should receive a certain kind of styling.</p>

<p><code>html
&lt;!-- html --&gt;
&lt;div id="first"&gt;&lt;/div&gt;
&lt;div id="second"&gt;&lt;/div&gt;
</code></p>

<p>``` css
/* css */</p>

<h1 id="first-">first {</h1>
<p>height: 50px;
}</p>

<h1 id="second-">second {</h1>
<p>height: 100px;
}
```</p>

<h2 id="pseudo-class">Pseudo-class</h2>

<p>A <strong>pseudo-class selector</strong> is a way of accessing HTML items that aren’t part of the document tree</p>

<p>Pseudo-class selectors let us style <strong>changes</strong> in our HTML document.</p>

<p><code>css
a:hover {
	color: #cc0000;
	text-decoration: none;
}
</code></p>

<p>There are a number of useful pseudo-class selectors for links, including:</p>

<ul>
  <li><code>a:link</code>: An unvisited link.</li>
  <li><code>a:visited</code>: A visited link.</li>
  <li><code>a:hover</code>: A link you’re hovering your mouse over.</li>
</ul>

<p><code>first-child</code> is used to apply styling to only the elements that are the first children of their parents.</p>

<p><code>css
p:first-child {
  color: red;
}
</code></p>

<p><code>Nth child</code> would turn every paragraph that is the second child of its parent element red.</p>

<p>``` css
p:nth-child(2) {
  color: red;
}</p>

<p>```</p>

<h2 id="taking-up-space">Taking up space</h2>

<p>4 possible values of <strong>display</strong> property:</p>

<ol>
  <li><strong>block</strong>: This makes the element a block box. It won’t let anything sit next to it on the page! It takes up the full width.</li>
  <li><strong>inline-block</strong>: This makes the element a block box, but will allow other elements to sit next to it on the same line.</li>
  <li><strong>inline</strong>: This makes the element sit on the same line as another element, but without formatting it like a block. It only takes up as much width as it needs.</li>
  <li><strong>none</strong>: This makes the element and its content disappear from the page entirely!</li>
</ol>

<h2 id="margins-borders-and-padding">Margins, Borders, and Padding</h2>

<p><img src="http://s3.amazonaws.com/codecademy-blog/assets/ae09140c.png" /></p>

<h4 id="margin">Margin</h4>

<p><code>css
div {
	margin: auto; /* centering it on the page */
}
</code></p>

<p><code>css
div {
	margin: 1px 2px 3px 4px; /* top right bottom left */
}
</code></p>

<h4 id="padding">Padding</h4>

<p><code>css
div {
	padding: 10px; /* 10 pixels of padding on all sides */
}
</code></p>

<h4 id="negative-values">Negative values</h4>

<p><code>margin-left: -20px</code> will move the element twenty pixels to the <em>left</em>.</p>

<h2 id="floating">Floating</h2>

<p>When you <strong>float</strong> an element on the page, you’re telling the webpage: “I’m about to tell you where to put this element, but you have to <em>put it into the flow of other elements</em>.”</p>

<h4 id="clearing-elements">Clearing elements</h4>

<p>If you tell an element to <code>clear: left</code>, it will immediately move below any floating elements on the left side of the page; it can also clear elements on the <code>right</code>. If you tell it to <code>clear: both</code>, it will get out of the way of elements floating on the left and right!</p>

<h2 id="absolute-relative-and-fixed-positioning">Absolute, Relative, and Fixed Positioning</h2>

<p>If you don’t specify an element’s positioning type, it defaults to <code>static</code> and just plunks itself down in the document.</p>

<h4 id="absolute-positioning">Absolute positioning</h4>

<p>When an element is set to <code>position: absolute</code>, it’s then positioned in relation to the first parent element it has that doesn’t have <code>position: static</code>. If there’s no such element, the element with <code>position: absolute</code> gets positioned relative to <code>&lt;html&gt;</code>.</p>

<h4 id="relative-positioning">Relative positioning</h4>

<p>Relative tells the element to move relative to where it would have landed if it just had the default <code>static</code> positioning.</p>

<h4 id="fixed-positioning">Fixed positioning</h4>

<ul>
  <li><code>fixed</code> positioning anchors an element to the browser window—you can think of it as gluing the element to the screen. If you scroll up and down, the fixed element stays put even as other elements scroll past.</li>
  <li>You can think of the <code>z-index</code> as a measure of importance: the higher an element’s <code>z-index</code>, the higher it will be “stacked” on the page. Giving your header a <code>z-index</code> of 1 while not giving any of the other elements a <code>z-index</code> ensures that your header will sit “on top of” your other elements and won’t get stuck behind them.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Basics]]></title>
    <link href="http://NavySPACE.net/blog/html-basics/"/>
    <updated>2016-02-02T14:33:00-08:00</updated>
    <id>http://NavySPACE.net/blog/html-basics</id>
    <content type="html"><![CDATA[<p>I have got a habit of taking notes while reading technical stuff - books, blogs or even online courses. It really helps me to recall the concepts and points through notes written in <code>Markdown</code>, providing a deeper understanding of the topic.</p>

<p><code>Codecademy</code> uses a step by step learning methodology to help beginners learn web fundamentals through coding practice. Here is the notes of the HTML part of its courses: HTML &amp; CSS, which I’d like to treat it as a cheat sheet and help me recall the basics of HTML within minutes.</p>

<h2 id="concepts">Concepts</h2>

<p>Some concepts and terminologies about HTML.</p>

<ul>
  <li><strong>HTML</strong> stands for <strong>HyperText Markup Language</strong></li>
  <li><strong>Hypertext</strong> means “text with links in it.”</li>
  <li>A <strong>markup language</strong> is a programming language used to make text do more than just sit on a page: it can turn text into images, links, tables, lists, and much more.</li>
  <li>Things inside <code>&lt;&gt;</code>s are called <strong>Tags</strong>. Tags nearly always come in pairs: an opening tag and a closing tag.</li>
</ul>

<h2 id="skeleton-of-the-page">Skeleton of the page</h2>

<p>Basic structure(skeleton) of a web page.</p>

<ul>
  <li>Always put <code>&lt;!DOCTYPE html&gt;</code> on the first line. This tells the browser what language it’s reading (in this case, HTML).</li>
  <li>Always put <code>&lt;html&gt;</code> on the next line. This starts the HTML document.</li>
  <li>Always put <code>&lt;/html&gt;</code> on the last line. This ends the HTML document.</li>
  <li>There are always two parts to an HTML file: the <strong>head</strong> and the <strong>body</strong>.</li>
  <li>The <strong>head</strong> contains information about your HTML file, like its title. The title is what we see in the browser’s title bar or page tab.</li>
  <li>The <strong>body</strong> is where you put your content, such as text, images, and links.</li>
</ul>

<h2 id="heading">Heading</h2>

<p>HTML defines six levels of headings.</p>

<p>``` html</p>
<h1>The CEO</h1>
<h2>VP</h2>
<h3>Director</h3>
<h4>Middle management</h4>
<h5>Lowly assistant</h5>
<h6>Gets coffee for everyone</h6>
<p>```</p>

<h2 id="image--link">Image &amp; Link</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;a href="http://www.codecademy.com/"&gt;
  &lt;img src="https://www.google.ca/images/nav_logo242.png"/&gt;
&lt;/a&gt;
</code></p>

<p><code>Result</code></p>

<p><a href="http://www.codecademy.com/">
  <img src="http://webstir.org/icons/code-cademy-icon.png" />
</a></p>

<h2 id="ordered-list">Ordered List</h2>

<p><code>HTML</code></p>

<p>``` html</p>
<ol>
  <li>Raindrops on roses</li>
  <li>Whiskers on kittens</li>
</ol>
<p>```</p>

<p><code>Result</code></p>

<ol>
  <li>Raindrops on roses</li>
  <li>Whiskers on kittens</li>
</ol>

<h2 id="unordered-list">Unordered List</h2>

<p><code>HTML</code></p>

<p>``` html</p>
<ul>
  <li>Cheese</li>
  <li>Sour Cream</li>
</ul>
<p>```</p>

<p><code>Result</code></p>

<ul>
  <li>Cheese</li>
  <li>Sour Cream</li>
</ul>

<h2 id="comment">Comment</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;!-- This is an example of a comment! --&gt;
</code></p>

<h2 id="font-size">Font Size</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;p style="font-size: 0.5em"&gt;font-size&lt;/p&gt;
</code></p>

<p><code>Result</code></p>

<p style="font-size: 0.5em">font-size</p>

<h2 id="font-color">Font Color</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;p style="color: green; font-size: 16px"&gt;Green&lt;/p&gt;
</code></p>

<p><code>Result</code></p>

<p style="color: green; font-size: 16px">Green</p>

<h2 id="font-family">Font Family</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;h6 style="font-family: Arial"&gt;Title&lt;/h6&gt;
</code></p>

<p><code>Result</code></p>

<h6 style="font-family: Arial">Title</h6>

<h2 id="background-color">Background Color</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;p style="background-color: red"&gt;Hello!&lt;/p&gt;
</code></p>

<p><code>Result</code></p>

<p style="background-color: red">Hello!</p>

<h2 id="align">Align</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;h6 style="text-align: center"&gt;Center Heading&lt;/h6&gt;
</code></p>

<p><code>Result</code></p>

<h6 style="text-align: center">Center Heading</h6>

<h2 id="strong-word">Strong Word</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;strong&gt;BOLD&lt;/strong&gt;
</code></p>

<p><code>Results</code></p>

<p><strong>BOLD</strong></p>

<h2 id="emphasize-word">Emphasize Word</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;em&gt;Italicize&lt;/em&gt;
</code></p>

<p><code>Result</code></p>

<p><em>Italicize</em></p>

<h2 id="table">Table</h2>

<p><code>HTML</code></p>

<p>``` html</p>
<table>
  <thead>
    <tr>
      <th colspan="2">Famous Monsters</th>
    </tr>
    <tr>
      <th>Famous Monster</th>
      <th>Birth Year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>King Kong</td>
      <td>1933</td>     
    </tr>
    <tr>
      <td>Dracula</td>
      <td>1897</td>     
    </tr>
  </tbody>
</table>
<p>```</p>

<p><code>Result</code></p>

<table>
  <thead>
    <tr>
      <th colspan="2">Famous Monsters</th>
    </tr>
    <tr>
      <th>Famous Monster</th>
      <th>Birth Year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>King Kong</td>
      <td>1933</td>     
    </tr>
    <tr>
      <td>Dracula</td>
      <td>1897</td>     
    </tr>
  </tbody>
</table>

<h2 id="div">Div</h2>

<p><code>HTML</code></p>

<p><code>html
&lt;div style="width:50px; height:50px; background-color:red"&gt;&lt;/div&gt;
</code></p>

<p><code>Result</code></p>

<p />
<div style="width:50px; height:50px; background-color:red"></div>

<h2 id="span">Span</h2>

<p><code>HTML</code></p>

<p>``` html</p>
<p>Black, except for the word <span style="color: red">red</span>!</p>
<p>```</p>

<p><code>Result</code></p>

<p>Black, except for the word <span style="color: red">red</span>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Glossary]]></title>
    <link href="http://NavySPACE.net/blog/css-glossary/"/>
    <updated>2016-01-26T10:10:00-08:00</updated>
    <id>http://NavySPACE.net/blog/css-glossary</id>
    <content type="html"><![CDATA[<p>The <code>markdown</code> version of Codecademy’s <a href="https://www.codecademy.com/articles/glossary-css">CSS Glossary</a>.</p>

<h2 id="comments">Comments</h2>

<p>Comments in CSS are signified by a forward-slash and asterisk.</p>

<p><code>css
/* This is a single line comment */
</code></p>

<p><code>css
/* This
is a multi-line
comment */
</code></p>

<h2 id="properties">Properties</h2>

<p>Properties are defined within selectors by defining a property and a value. They are separated with a colon and delineated with a semi-colon.</p>

<p><code>css
h1 {
  color: blue;
}
</code></p>

<p>Each CSS rule can have as many properties as you like. Each of them applies to the elements that the selector applies to.</p>

<p><code>css
h1 {
  font-size: 24px;
  font-weight: bold;
  border: 1px solid black;
  color: pink;
}
</code></p>

<h2 id="padding">Padding</h2>

<p>The padding is the spacing between the content and the border (edge of the element.). We can adjust this value with CSS to move the border closer to or farther from the content. Here, the div with id ‘box’ will get 10px of padding all around it.</p>

<p><code>css
#box {
  padding: 10px;
}
</code></p>

<h2 id="margin">Margin</h2>

<p>The margin is the space around the element. The larger the margin, the more space between our element and the elements around it. We can adjust the margin to move our HTML elements closer to or farther from each other. Here, the div with id ‘box’ will get 10px of margin above and below it, and 5px of margin to the left and right.</p>

<p><code>css
#box {
  margin: 10px 5px 10px 5px;
}
</code></p>

<h2 id="font-family">font-family</h2>

<p>The <code>font-family</code> property sets the font of an HTML element’s text.</p>

<p><code>css
p {
  font-family: Arial, Helvetica, sans-serif;
}
</code></p>

<h2 id="selectors">Selectors</h2>

<p>Selectors are used in CSS to select the parts of the HTML that are being styled. You can use several different methods for selecting an element.</p>

<p><code>css
selector {
  rules;
  rules;
  rules;
}
</code></p>

<h4 id="class-name-selectors">Class name selectors</h4>

<p>You can also select HTML elements by their Class name. Unlike ID selectors, Class selectors select all elements with a matching class.</p>

<p><code>css
a.link {
  font-size: 12px;
}
</code></p>

<p><code>css
.jumbo {
  text-size: 1000px;
}
</code></p>

<h4 id="element-selectors">Element selectors</h4>

<p>You are able to select HTML elements first by simply using the name of the element.</p>

<p><code>css
body {
  background-color: #333;
}
</code></p>

<p><code>css
h1 {
  color: blue;
}
</code></p>

<p><code>css
a {
  text-underline: none;
}
</code></p>

<h4 id="id-selectors">ID selectors</h4>

<p>ID selectors are used to select only a single item on a page. Like the term (“identification”) indicates, ID selectors will ONLY select the first element with a matching ID.</p>

<p><code>css
#thatThingINeededToStyle {
  color: blue;
  font-size: 24px;
}
</code></p>

<p><code>css
a#codecademy {
  color: purple;
}
</code></p>

<h4 id="attribute-selectors">Attribute selectors</h4>

<p>HTML elements are also able to be selected by their attributes.</p>

<p><code>css
a[href="http://codecademy.com"] {
  color: purple;
}
</code></p>

<p><code>css
input[type="text"] {
  width: 100px;
}
</code></p>

<p><code>css
input[required] {
  border: 1px red solid;
}
</code></p>

<h4 id="child-selectors">Child selectors</h4>

<p>You can also use multiple selectors to get the exact elements you want, by using parental nesting. By using the “greater-than” symbol (&gt;), you can select only the direct children of an element, going down only one level.</p>

<p>Example</p>

<p>``` css
ul &gt; li { /* Child */
  display: inline-block
}</p>

<p>/* Selects only the first-level list items in all unordered lists in the HTML */
```</p>

<p>``` css
ul a { /* Descendant */
  text-underline: none;
}</p>

<p>/* Selects all anchors which have an unordered list in their ancestry */
```</p>

<p>``` css
ul + span { /* Next-sibling */
  display: inline;
}</p>

<p>/* Selects only spans that directly follow an unordered list */
```</p>

<p>``` css
a ~ h1 { /* Following-sibling */
  color: blue;
}</p>

<p>/* Selects all h1 elements that are in the general vicinity of an anchor */
```</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_selectors">Read more</a></p>

<h4 id="universal-selector">Universal selector</h4>

<p>The universal selector <code>*</code> may be used to select all the elements in a particular range. Be aware that the universal selector is the most performance taxing selector, and should be used sparingly.</p>

<p><code>css
* { /* Selects ALL HTML elements in the page */
  background-color: blue;
}
</code></p>

<p><code>css
body * { /* Selects ALL descendants of the body */
  color: red;
}
</code></p>

<p><code>css
div &gt; * { /* Selects ALL first-level children of divs */
  color: red;
}
</code></p>

<p>Read more
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors">[1]</a>
<a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/">[2]</a>
<a href="http://dev.opera.com/articles/view/27-css-basics/#universal">[3]</a></p>

<h2 id="pseudo-class-selectors">Pseudo class selectors</h2>

<p>Pseudo Selectors can be used to narrow down a selection with certain rules.</p>

<p>``` css
li:first-child {
  color: red;
}</p>

<p>/*
  This selects only &lt;li&gt; elements that have no elements before them</p>
<ul>
    <li>Selected; will be red</li>
    <li>Not selected</li>
    <li>Not selected</li>
  </ul>
<p>*/
```</p>

<p>``` css
li:last-child {
  color: red;
}</p>

<p>/* This does the opposite; only the last &lt;li&gt; will be red. */
```</p>

<p>``` css
a:hover {
  text-decoration: underline;
}</p>

<p>/* Will underline all links when the user puts their mouse over them */
```</p>

<p>``` css
a:active {
  font-weight: bold;
}</p>

<p>/* Will make all links bold while the user is clicking on them. */
```</p>

<p>Read more
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">[1]</a>
<a href="http://dev.opera.com/articles/view/27-css-basics/#pseudoclasses">[2]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Glossary]]></title>
    <link href="http://NavySPACE.net/blog/html-glossary/"/>
    <updated>2016-01-25T15:51:00-08:00</updated>
    <id>http://NavySPACE.net/blog/html-glossary</id>
    <content type="html"><![CDATA[<p><a href="https://www.codecademy.com/articles/glossary-html">HTML Glossary</a> is a perfect introduction to HTML basics written by Codecademy team. Here is the version for <code>markdown</code> fans.</p>

<h2 id="attributes">Attributes</h2>

<p>Introduce attributes like class, id and href.</p>

<h5 id="class"><code>class</code></h5>

<p>HTML elements can have one or more classes, separated by spaces. You can style elements using CSS by selecting them with their classes.</p>

<p><code>html
&lt;div class="big-box yellow-box"&gt;This is a big yellow box.&lt;/div&gt;
</code></p>

<h5 id="id"><code>id</code></h5>

<p>An HTML element can have an <code>id</code> attribute to identify it. <code>id</code> elements should always be unique to that single element, and each element should never have more than one id.</p>

<p><code>html
&lt;div id="my-box"&gt;This is my box! Put your text in some other box.&lt;/div&gt;
</code></p>

<h5 id="href"><code>href</code></h5>

<p>Links tell the browser where to go using an <code>href</code> attribute, which stores a URL.</p>

<p><code>html
&lt;a href="http://google.com"&gt;Google it!&lt;/a&gt;
</code></p>

<h2 id="basic-formatting">Basic Formatting</h2>

<p>You can easily format text to be bold, italic, or underlined using simple formatting tags.</p>

<p><code>html
This text is &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italicized&lt;/i&gt;, and &lt;u&gt;underlined&lt;/u&gt;.
</code>
- This text is <b>bold</b>, <i>italicized</i>, and <u>underlined</u>.</p>

<h2 id="body">Body</h2>

<p>The <code>body</code> is the container for all of a page’s content. Comes after the <code>&lt;head&gt;</code> tag, within the overall <code>&lt;html&gt;</code> tag.</p>

<p>``` html</p>
<html>
  <head>
    <title>An example of the body tag</title>
  </head>
  <body>
    This is inside the body!
  </body>
</html>
<p>```</p>

<p>Almost all content belongs inside the <code>body</code> tag. The main exceptions are <code>script</code> and <code>style</code> tags, as well as the page <code>title</code> tag. As you can see in this example, there is a heading, an image, and a link all inside the body tag. The <code>head</code> tag contains only external files and the page title.</p>

<p>``` html</p>
<html>
  <head>
    <title>My homepage</title>
    <link rel="stylesheet" type="text/css" href="homepage.css" />
    <script type="text/javascript" src="homepage.js"></script>
  </head>
  <body>
    <h1>Hello, this is a picture of my cat!</h1>
    <img src="cat.jpg" />
    <a href="mailto:cat@codecademy.com">Email my cat</a>
  </body>
</html>
<p>```</p>

<h2 id="children">Children</h2>

<p>An element that is an immediate descendent of another element or nested within another element is called a child. These become useful when using CSS child selectors and psuedo-elements.</p>

<p><code>html
&lt;ul id="parent"&gt;
  &lt;li id="child"&gt;I'm a child of parent!&lt;/li&gt;
&lt;/ul&gt;
</code></p>

<h2 id="comments">Comments</h2>

<p>HTML comments are sometimes used in code to explain parts of the markup. They are similar to comments in other languages. Users do not see comments in their browser.</p>

<p><code>html
&lt;!-- This is an HTML comment! --&gt;
</code></p>

<h2 id="div">Div</h2>

<p>A block level container (or ‘division’ of the web page) for content with no semantic meaning.</p>

<p>``` html</p>
<div>This is a div element.</div>
<p>```</p>

<h2 id="head">Head</h2>

<p>Tag that surrounds important content that is invisible to the user, but is important to the browser. Elements within this tag contain metadata about the page and links to stylesheets, scripts, etc.</p>

<p>``` html</p>
<html>
  <head>
  </head>
  <body>
  </body>
</html>
<p>```</p>

<h2 id="headings">Headings</h2>

<p>Heading elements like <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, … allow you to use six levels of document headings, ranging from largest to smallest, breaking up the document into logical sections. For example, the word ‘Headings’ above is wrapped in a <code>&lt;h2&gt;</code> tag.</p>

<p>``` html</p>
<h1> This is a header! </h1>
<p>```</p>

<h2 id="horizontal-rules">Horizontal rules</h2>

<p>This tag creates a black line one pixel thick that runs the all the way across its container. It can be styled to look differently with CSS.</p>

<p>``` html</p>
<hr />

<p>```</p>

<h2 id="html">HTML</h2>

<p>HTML stands for <strong>Hyper Text Markup Language</strong>. It is the language used to create all websites.</p>

<p>All HTML files live within an over-arching <code>html</code> tag. This is the basic tag that defines an html document.</p>

<p>``` html</p>
<html>
  The rest of your web page goes in here!
</html>
<p>```</p>

<h2 id="hyperlinks">Hyperlinks</h2>

<p>Hyperlinks (or just links) take the user to another webpage when they click on it. The most common attribute used with links is <code>href</code>, which tells the browser where the link goes.</p>

<p><code>html
The following text is &lt;a href="http://google.com"&gt;goes to Google&lt;/a&gt;
</code>
- The following text is <a href="http://google.com">goes to Google</a>.</p>

<h2 id="images">Images</h2>

<p>The <code>img</code> tag embeds an image into your HTML. Always found with the <code>src</code> attribute, which tells the browser where to find the image. Note that the <code>&lt;img/&gt;</code> tag is self-closing, and you can reference either local</p>

<p><code>html
&lt;img src='mylocalimage.jpg'/&gt;
</code></p>

<h2 id="line-breaks">Line breaks</h2>

<p>This tag is used in a block of text to force a line break. This is to be used for things which are a single paragraph, but where this formatting is necessary such as <em>poems</em> or <em>addresses</em>. To separate paragraphs, separate each paragraph into a separate element instead. The resulting element on a web page will look like:</p>

<p>``` html</p>
<p> Add: Fleetwood, Surrey, BC <br /> Tel: (778) 219-2111 </p>
<p>```
Add: Fleetwood, Surrey, BC <br /> Tel: (778) 219-2111</p>

<h2 id="links">Links</h2>

<p>Link elements are used to connect your document to a related resource (very different from hyperlinks, which take you to another webpage when you click on them). Links appear only in the head section of a document so they do not alter the content, but only the presentation. Links are most commonly used to connect to a stylesheet, script, favicon, or alternate format of the page such as an RSS feed or PDF.</p>

<p><code>html
&lt;link type="text/css" rel="stylesheet" href="styles.css" /&gt;
</code></p>

<h2 id="lists">Lists</h2>

<p>HTML supports two kinds of lists: ordered lists and unordered lists. Within lists each individual list item has its own tag.</p>

<h4 id="unordered-lists">Unordered Lists</h4>

<p>Unordered lists are just lists whose items are denoted with bullet points.</p>

<p>``` html</p>
<h3>Shopping list</h3>
<ul>
  <li>Dish soap</li>
  <li>Kitty litter</li>
  <li>Tomato sauce</li>
</ul>
<p>```</p>

<h4 id="ordered-lists">Ordered Lists</h4>

<p>Ordered lists’ items are denoted with numbers.</p>

<p>``` html</p>
<ol>
  <h3>My numbered list</h3>
  <li>First item!</li>
  <li>Second item!</li>
  <li>Last item!</li>
</ol>
<p>```</p>

<h2 id="paragraphs">Paragraphs</h2>

<p>One of the most common tags in HTML - it denotes a paragraph of text. It often has other elements nested inside of it, such as <code>&lt;img/&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code>.</p>

<p>``` html</p>
<p>This is paragraph text!</p>
<p>```</p>

<h2 id="semantic-formatting">Semantic formatting</h2>

<p>These tags are similar to the previously mentioned formatting tags which have fallen out of favor. The difference is that these tags have semantic value (meaning). <code>&lt;em&gt;</code> is used for something that you wish to emphasize and <code>&lt;strong&gt;</code> is used for something that is important. With both of these elements, you can convey the level of emphasis or importance with nesting. The more times that you nest the element within itself, the higher the magnitude of the text it contains.</p>

<p>``` html</p>
<p><strong><strong>Warning:</strong>Acid can cause severe burns</strong></p>
<p>```</p>

<ul>
  <li>
    <p><strong><strong>Warning: </strong>Acid can cause severe burns</strong></p>
  </li>
</ul>

<h2 id="tables">Tables</h2>

<p>An element for displaying information in rows and columns. Supports headers and footers for labeling columns. Divides information into rows (denoted by the <code>tr</code> tag) which contain cells (denoted by the <code>td</code> tag).</p>

<p>``` html</p>
<table>
  <thead>
    <tr>
      <th>Item</th>
      <th>Price</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Banana</td>
      <td>$56.75</td>
    </tr>
    <tr>
      <td>Yogurt</td>
      <td>$12.99</td>
    </tr>
  </tbody>

  <tfoot>
    <tr>
      <td>Total</td>
      <td>$69.74</td>
    </tr>
  </tfoot>
</table>
<p>```</p>

<table>
  <thead>
    <tr>
      <th>Item</th>
      <th>Price</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Banana</td>
      <td>$56.75</td>
    </tr>
    <tr>
      <td>Yogurt</td>
      <td>$12.99</td>
    </tr>
  </tbody>

  <tfoot>
    <tr>
      <td>Total</td>
      <td>$69.74</td>
    </tr>
  </tfoot>
</table>

<h2 id="tags--elements">Tags &amp; Elements</h2>

<p>Tags are basic labels that define and separate parts of your markup into elements. They are comprised of a keyword surrounded by angle brackets <code>&lt;&gt;</code>. Content goes between two tags and the closing one is prefixed with a slash (Note: there are some self-closing HTML tags, like image tags). Tags also have attributes, which are</p>

<p><code>html
&lt;tag attribute='value'&gt;content&lt;/tag&gt;
</code></p>

<h2 id="title">Title</h2>

<p>This tag tells the browser what to display as the page title at the top and tells search engines what the title of your site is. It goes inside <code>&lt;head&gt;</code> tags. Try and make your page titles descriptive, but not overly verbose.</p>

<p>``` html</p>
<title> HTML Glossary </title>
<p>```</p>
]]></content>
  </entry>
  
</feed>
